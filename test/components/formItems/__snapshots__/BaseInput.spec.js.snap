// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BaseInput match the snapshot 1`] = `
VueComponent {
  "$attrs": Object {},
  "$children": Array [],
  "$createElement": [Function],
  "$el": <div
    class="base-input base-input--error"
  >
    <div
      class="base-input__wrapper"
    >
      <input
        autocomplete="on"
        class="base-input__main form-control is-danger"
        id=""
        maxlength=""
        min=""
        name=""
        placeholder=""
        type="text"
      />
       
      <span
        class="base-input__error"
      >
        This is error message
      </span>
    </div>
     
    <!---->
  </div>,
  "$emit": [Function],
  "$listeners": Object {},
  "$options": Object {
    "_componentTag": undefined,
    "_parentListeners": Object {},
    "_parentVnode": VNode {
      "asyncFactory": undefined,
      "asyncMeta": undefined,
      "children": undefined,
      "componentInstance": [Circular],
      "componentOptions": Object {
        "Ctor": [Function],
        "children": undefined,
        "listeners": Object {},
        "propsData": Object {
          "error": "This is error message",
          "mask": "",
          "value": "test",
        },
        "tag": undefined,
      },
      "context": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": true,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": true,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": VueComponent {
          "$attrs": Object {},
          "$children": Array [
            [Circular],
          ],
          "$createElement": [Function],
          "$el": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "$emit": [Function],
          "$listeners": Object {},
          "$options": Object {
            "$_doNotStubChildren": true,
            "_Ctor": Object {
              "8": [Function],
            },
            "_base": [Function],
            "_isFunctionalContainer": undefined,
            "beforeCreate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "beforeDestroy": Array [
              [Function],
            ],
            "components": Object {
              "transition": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "abstract": true,
                  "name": "transition",
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                },
                "abstract": true,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": "transition",
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
              "transition-group": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "beforeMount": [Function],
                  "methods": Object {
                    "hasMove": [Function],
                  },
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "updated": [Function],
                },
                "abstract": undefined,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": undefined,
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
            },
            "computed": Object {
              "errors": [Function],
              "fields": [Function],
            },
            "directives": Object {},
            "filters": Object {},
            "localVue": [Function],
            "methods": Object {},
            "mocks": Object {},
            "provide": [Function],
            "render": [Function],
            "shouldProxy": true,
            "stubs": Object {
              "transition": true,
              "transition-group": true,
            },
          },
          "$parent": undefined,
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
          "$vnode": undefined,
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_computedWatchers": Object {
            "errors": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": true,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "fields": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": true,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          },
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {},
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_provided": Object {
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
          },
          "_renderProxy": [Circular],
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 3,
          "_vnode": [Circular],
          "_watcher": Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": true,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": true,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "fields": Object {},
        },
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": [Circular],
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "data": Object {
        "attrs": Object {},
        "hook": Object {
          "destroy": [Function],
          "init": [Function],
          "insert": [Function],
          "prepatch": [Function],
        },
        "on": undefined,
        "pendingInsert": null,
        "scopedSlots": Object {
          "_normalized": Object {},
        },
      },
      "elm": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "fnContext": undefined,
      "fnOptions": undefined,
      "fnScopeId": undefined,
      "isAsyncPlaceholder": false,
      "isCloned": false,
      "isComment": false,
      "isOnce": false,
      "isRootInsert": true,
      "isStatic": false,
      "key": undefined,
      "ns": undefined,
      "parent": undefined,
      "raw": false,
      "tag": "vue-component-12-BaseInput",
      "text": undefined,
    },
    "_propKeys": Array [
      "value",
      "disabled",
      "name",
      "inputType",
      "error",
      "placeholder",
      "inputClass",
      "helpText",
      "autocomplete",
      "mask",
      "id",
      "maxLength",
      "min",
    ],
    "_renderChildren": undefined,
    "computed": Object {
      "errors": [Function],
      "fields": [Function],
    },
    "parent": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        [Circular],
      ],
      "$createElement": [Function],
      "$el": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "$_doNotStubChildren": true,
        "_Ctor": Object {
          "8": [Function],
        },
        "_base": [Function],
        "_isFunctionalContainer": undefined,
        "beforeCreate": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "beforeDestroy": Array [
          [Function],
        ],
        "components": Object {
          "transition": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "abstract": true,
              "name": "transition",
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
            },
            "abstract": true,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": "transition",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition-group": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "beforeMount": [Function],
              "methods": Object {
                "hasMove": [Function],
              },
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "updated": [Function],
            },
            "abstract": undefined,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": undefined,
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
        },
        "computed": Object {
          "errors": [Function],
          "fields": [Function],
        },
        "directives": Object {},
        "filters": Object {},
        "localVue": [Function],
        "methods": Object {},
        "mocks": Object {},
        "provide": [Function],
        "render": [Function],
        "shouldProxy": true,
        "stubs": Object {
          "transition": true,
          "transition-group": true,
        },
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "errors": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        "fields": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
      },
      "_data": Object {},
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": Object {
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
      },
      "_renderProxy": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": [Circular],
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": [Circular],
          "componentOptions": Object {
            "Ctor": [Function],
            "children": undefined,
            "listeners": Object {},
            "propsData": Object {
              "error": "This is error message",
              "mask": "",
              "value": "test",
            },
            "tag": undefined,
          },
          "context": [Circular],
          "data": Object {
            "attrs": Object {},
            "hook": Object {
              "destroy": [Function],
              "init": [Function],
              "insert": [Function],
              "prepatch": [Function],
            },
            "on": undefined,
            "pendingInsert": null,
            "scopedSlots": Object {
              "_normalized": Object {},
            },
          },
          "elm": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": true,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": "vue-component-12-BaseInput",
          "text": undefined,
        },
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 3,
      "_vnode": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": [Circular],
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {},
          "propsData": Object {
            "error": "This is error message",
            "mask": "",
            "value": "test",
          },
          "tag": undefined,
        },
        "context": [Circular],
        "data": Object {
          "attrs": Object {},
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "scopedSlots": Object {
            "_normalized": Object {},
          },
        },
        "elm": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-12-BaseInput",
        "text": undefined,
      },
      "_watcher": Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "fields": Object {},
    },
    "propsData": Object {
      "error": "This is error message",
      "mask": "",
      "value": "test",
    },
  },
  "$parent": VueComponent {
    "$attrs": Object {},
    "$children": Array [
      [Circular],
    ],
    "$createElement": [Function],
    "$el": <div
      class="base-input base-input--error"
    >
      <div
        class="base-input__wrapper"
      >
        <input
          autocomplete="on"
          class="base-input__main form-control is-danger"
          id=""
          maxlength=""
          min=""
          name=""
          placeholder=""
          type="text"
        />
         
        <span
          class="base-input__error"
        >
          This is error message
        </span>
      </div>
       
      <!---->
    </div>,
    "$emit": [Function],
    "$listeners": Object {},
    "$options": Object {
      "$_doNotStubChildren": true,
      "_Ctor": Object {
        "8": [Function],
      },
      "_base": [Function],
      "_isFunctionalContainer": undefined,
      "beforeCreate": Array [
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "beforeDestroy": Array [
        [Function],
      ],
      "components": Object {
        "transition": Object {
          "$_doNotStubChildren": true,
          "$_vueTestUtils_original": Object {
            "_Ctor": Object {
              "2": [Function],
              "8": [Function],
            },
            "abstract": true,
            "name": "transition",
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
          },
          "abstract": true,
          "attrs": undefined,
          "class": undefined,
          "domProps": undefined,
          "functional": undefined,
          "key": undefined,
          "model": undefined,
          "name": "transition",
          "nativeOn": undefined,
          "normalizedStyle": undefined,
          "on": undefined,
          "props": Object {
            "appear": Object {
              "type": [Function],
            },
            "appearActiveClass": Object {
              "type": [Function],
            },
            "appearClass": Object {
              "type": [Function],
            },
            "appearToClass": Object {
              "type": [Function],
            },
            "css": Object {
              "type": [Function],
            },
            "duration": Object {
              "type": Array [
                [Function],
                [Function],
                [Function],
              ],
            },
            "enterActiveClass": Object {
              "type": [Function],
            },
            "enterClass": Object {
              "type": [Function],
            },
            "enterToClass": Object {
              "type": [Function],
            },
            "leaveActiveClass": Object {
              "type": [Function],
            },
            "leaveClass": Object {
              "type": [Function],
            },
            "leaveToClass": Object {
              "type": [Function],
            },
            "mode": Object {
              "type": [Function],
            },
            "name": Object {
              "type": [Function],
            },
            "type": Object {
              "type": [Function],
            },
          },
          "render": [Function],
          "staticClass": undefined,
          "staticStyle": undefined,
          "style": undefined,
        },
        "transition-group": Object {
          "$_doNotStubChildren": true,
          "$_vueTestUtils_original": Object {
            "_Ctor": Object {
              "2": [Function],
              "8": [Function],
            },
            "beforeMount": [Function],
            "methods": Object {
              "hasMove": [Function],
            },
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "updated": [Function],
          },
          "abstract": undefined,
          "attrs": undefined,
          "class": undefined,
          "domProps": undefined,
          "functional": undefined,
          "key": undefined,
          "model": undefined,
          "name": undefined,
          "nativeOn": undefined,
          "normalizedStyle": undefined,
          "on": undefined,
          "props": Object {
            "appear": Object {
              "type": [Function],
            },
            "appearActiveClass": Object {
              "type": [Function],
            },
            "appearClass": Object {
              "type": [Function],
            },
            "appearToClass": Object {
              "type": [Function],
            },
            "css": Object {
              "type": [Function],
            },
            "duration": Object {
              "type": Array [
                [Function],
                [Function],
                [Function],
              ],
            },
            "enterActiveClass": Object {
              "type": [Function],
            },
            "enterClass": Object {
              "type": [Function],
            },
            "enterToClass": Object {
              "type": [Function],
            },
            "leaveActiveClass": Object {
              "type": [Function],
            },
            "leaveClass": Object {
              "type": [Function],
            },
            "leaveToClass": Object {
              "type": [Function],
            },
            "moveClass": Object {
              "type": [Function],
            },
            "name": Object {
              "type": [Function],
            },
            "tag": Object {
              "type": [Function],
            },
            "type": Object {
              "type": [Function],
            },
          },
          "render": [Function],
          "staticClass": undefined,
          "staticStyle": undefined,
          "style": undefined,
        },
      },
      "computed": Object {
        "errors": [Function],
        "fields": [Function],
      },
      "directives": Object {},
      "filters": Object {},
      "localVue": [Function],
      "methods": Object {},
      "mocks": Object {},
      "provide": [Function],
      "render": [Function],
      "shouldProxy": true,
      "stubs": Object {
        "transition": true,
        "transition-group": true,
      },
    },
    "$parent": undefined,
    "$refs": Object {},
    "$root": [Circular],
    "$scopedSlots": Object {},
    "$slots": Object {},
    "$validator": ScopedValidator {
      "_base": Validator {
        "errors": ErrorBag {
          "items": Array [],
          "vmId": null,
        },
        "fastExit": true,
        "fields": FieldBag {
          "items": Array [],
        },
        "paused": false,
      },
      "_paused": false,
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "id": 3,
    },
    "$vnode": undefined,
    "__emitted": Object {},
    "__emittedByOrder": Array [],
    "_c": [Function],
    "_computedWatchers": Object {
      "errors": Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          42,
          43,
        },
        "deps": Array [
          Dep {
            "id": 42,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 43,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
        "getter": [Function],
        "id": 7,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "vm": [Circular],
      },
      "fields": Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          10,
          11,
        },
        "deps": Array [
          Dep {
            "id": 10,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 11,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
        "getter": [Function],
        "id": 8,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": Object {},
        "vm": [Circular],
      },
    },
    "_data": Object {},
    "_directInactive": false,
    "_events": Object {},
    "_hasHookEvent": false,
    "_inactive": null,
    "_isBeingDestroyed": false,
    "_isDestroyed": false,
    "_isMounted": true,
    "_isVue": true,
    "_provided": Object {
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
    },
    "_renderProxy": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        [Circular],
      ],
      "$createElement": [Function],
      "$el": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "$_doNotStubChildren": true,
        "_Ctor": Object {
          "8": [Function],
        },
        "_base": [Function],
        "_isFunctionalContainer": undefined,
        "beforeCreate": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "beforeDestroy": Array [
          [Function],
        ],
        "components": Object {
          "transition": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "abstract": true,
              "name": "transition",
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
            },
            "abstract": true,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": "transition",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition-group": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "beforeMount": [Function],
              "methods": Object {
                "hasMove": [Function],
              },
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "updated": [Function],
            },
            "abstract": undefined,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": undefined,
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
        },
        "computed": Object {
          "errors": [Function],
          "fields": [Function],
        },
        "directives": Object {},
        "filters": Object {},
        "localVue": [Function],
        "methods": Object {},
        "mocks": Object {},
        "provide": [Function],
        "render": [Function],
        "shouldProxy": true,
        "stubs": Object {
          "transition": true,
          "transition-group": true,
        },
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "errors": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        "fields": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
      },
      "_data": Object {},
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": Object {
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
      },
      "_renderProxy": [Circular],
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 3,
      "_vnode": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": [Circular],
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {},
          "propsData": Object {
            "error": "This is error message",
            "mask": "",
            "value": "test",
          },
          "tag": undefined,
        },
        "context": [Circular],
        "data": Object {
          "attrs": Object {},
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "scopedSlots": Object {
            "_normalized": Object {},
          },
        },
        "elm": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-12-BaseInput",
        "text": undefined,
      },
      "_watcher": Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "fields": Object {},
    },
    "_self": [Circular],
    "_staticTrees": null,
    "_uid": 3,
    "_vnode": VNode {
      "asyncFactory": undefined,
      "asyncMeta": undefined,
      "children": undefined,
      "componentInstance": [Circular],
      "componentOptions": Object {
        "Ctor": [Function],
        "children": undefined,
        "listeners": Object {},
        "propsData": Object {
          "error": "This is error message",
          "mask": "",
          "value": "test",
        },
        "tag": undefined,
      },
      "context": [Circular],
      "data": Object {
        "attrs": Object {},
        "hook": Object {
          "destroy": [Function],
          "init": [Function],
          "insert": [Function],
          "prepatch": [Function],
        },
        "on": undefined,
        "pendingInsert": null,
        "scopedSlots": Object {
          "_normalized": Object {},
        },
      },
      "elm": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "fnContext": undefined,
      "fnOptions": undefined,
      "fnScopeId": undefined,
      "isAsyncPlaceholder": false,
      "isCloned": false,
      "isComment": false,
      "isOnce": false,
      "isRootInsert": true,
      "isStatic": false,
      "key": undefined,
      "ns": undefined,
      "parent": undefined,
      "raw": false,
      "tag": "vue-component-12-BaseInput",
      "text": undefined,
    },
    "_watcher": Watcher {
      "active": true,
      "before": [Function],
      "cb": [Function],
      "deep": false,
      "depIds": Set {},
      "deps": Array [],
      "dirty": false,
      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
      "getter": [Function],
      "id": 9,
      "lazy": false,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": undefined,
      "vm": [Circular],
    },
    "_watchers": Array [
      Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          42,
          43,
        },
        "deps": Array [
          Dep {
            "id": 42,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 43,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
        "getter": [Function],
        "id": 7,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          10,
          11,
        },
        "deps": Array [
          Dep {
            "id": 10,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 11,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
        "getter": [Function],
        "id": 8,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": Object {},
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
    ],
    "errors": ErrorBag {
      "items": Array [],
      "vmId": 3,
    },
    "fields": Object {},
  },
  "$refs": Object {
    "input": <input
      autocomplete="on"
      class="base-input__main form-control is-danger"
      id=""
      maxlength=""
      min=""
      name=""
      placeholder=""
      type="text"
    />,
  },
  "$root": VueComponent {
    "$attrs": Object {},
    "$children": Array [
      [Circular],
    ],
    "$createElement": [Function],
    "$el": <div
      class="base-input base-input--error"
    >
      <div
        class="base-input__wrapper"
      >
        <input
          autocomplete="on"
          class="base-input__main form-control is-danger"
          id=""
          maxlength=""
          min=""
          name=""
          placeholder=""
          type="text"
        />
         
        <span
          class="base-input__error"
        >
          This is error message
        </span>
      </div>
       
      <!---->
    </div>,
    "$emit": [Function],
    "$listeners": Object {},
    "$options": Object {
      "$_doNotStubChildren": true,
      "_Ctor": Object {
        "8": [Function],
      },
      "_base": [Function],
      "_isFunctionalContainer": undefined,
      "beforeCreate": Array [
        [Function],
        [Function],
        [Function],
        [Function],
      ],
      "beforeDestroy": Array [
        [Function],
      ],
      "components": Object {
        "transition": Object {
          "$_doNotStubChildren": true,
          "$_vueTestUtils_original": Object {
            "_Ctor": Object {
              "2": [Function],
              "8": [Function],
            },
            "abstract": true,
            "name": "transition",
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
          },
          "abstract": true,
          "attrs": undefined,
          "class": undefined,
          "domProps": undefined,
          "functional": undefined,
          "key": undefined,
          "model": undefined,
          "name": "transition",
          "nativeOn": undefined,
          "normalizedStyle": undefined,
          "on": undefined,
          "props": Object {
            "appear": Object {
              "type": [Function],
            },
            "appearActiveClass": Object {
              "type": [Function],
            },
            "appearClass": Object {
              "type": [Function],
            },
            "appearToClass": Object {
              "type": [Function],
            },
            "css": Object {
              "type": [Function],
            },
            "duration": Object {
              "type": Array [
                [Function],
                [Function],
                [Function],
              ],
            },
            "enterActiveClass": Object {
              "type": [Function],
            },
            "enterClass": Object {
              "type": [Function],
            },
            "enterToClass": Object {
              "type": [Function],
            },
            "leaveActiveClass": Object {
              "type": [Function],
            },
            "leaveClass": Object {
              "type": [Function],
            },
            "leaveToClass": Object {
              "type": [Function],
            },
            "mode": Object {
              "type": [Function],
            },
            "name": Object {
              "type": [Function],
            },
            "type": Object {
              "type": [Function],
            },
          },
          "render": [Function],
          "staticClass": undefined,
          "staticStyle": undefined,
          "style": undefined,
        },
        "transition-group": Object {
          "$_doNotStubChildren": true,
          "$_vueTestUtils_original": Object {
            "_Ctor": Object {
              "2": [Function],
              "8": [Function],
            },
            "beforeMount": [Function],
            "methods": Object {
              "hasMove": [Function],
            },
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "updated": [Function],
          },
          "abstract": undefined,
          "attrs": undefined,
          "class": undefined,
          "domProps": undefined,
          "functional": undefined,
          "key": undefined,
          "model": undefined,
          "name": undefined,
          "nativeOn": undefined,
          "normalizedStyle": undefined,
          "on": undefined,
          "props": Object {
            "appear": Object {
              "type": [Function],
            },
            "appearActiveClass": Object {
              "type": [Function],
            },
            "appearClass": Object {
              "type": [Function],
            },
            "appearToClass": Object {
              "type": [Function],
            },
            "css": Object {
              "type": [Function],
            },
            "duration": Object {
              "type": Array [
                [Function],
                [Function],
                [Function],
              ],
            },
            "enterActiveClass": Object {
              "type": [Function],
            },
            "enterClass": Object {
              "type": [Function],
            },
            "enterToClass": Object {
              "type": [Function],
            },
            "leaveActiveClass": Object {
              "type": [Function],
            },
            "leaveClass": Object {
              "type": [Function],
            },
            "leaveToClass": Object {
              "type": [Function],
            },
            "moveClass": Object {
              "type": [Function],
            },
            "name": Object {
              "type": [Function],
            },
            "tag": Object {
              "type": [Function],
            },
            "type": Object {
              "type": [Function],
            },
          },
          "render": [Function],
          "staticClass": undefined,
          "staticStyle": undefined,
          "style": undefined,
        },
      },
      "computed": Object {
        "errors": [Function],
        "fields": [Function],
      },
      "directives": Object {},
      "filters": Object {},
      "localVue": [Function],
      "methods": Object {},
      "mocks": Object {},
      "provide": [Function],
      "render": [Function],
      "shouldProxy": true,
      "stubs": Object {
        "transition": true,
        "transition-group": true,
      },
    },
    "$parent": undefined,
    "$refs": Object {},
    "$root": [Circular],
    "$scopedSlots": Object {},
    "$slots": Object {},
    "$validator": ScopedValidator {
      "_base": Validator {
        "errors": ErrorBag {
          "items": Array [],
          "vmId": null,
        },
        "fastExit": true,
        "fields": FieldBag {
          "items": Array [],
        },
        "paused": false,
      },
      "_paused": false,
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "id": 3,
    },
    "$vnode": undefined,
    "__emitted": Object {},
    "__emittedByOrder": Array [],
    "_c": [Function],
    "_computedWatchers": Object {
      "errors": Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          42,
          43,
        },
        "deps": Array [
          Dep {
            "id": 42,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 43,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
        "getter": [Function],
        "id": 7,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "vm": [Circular],
      },
      "fields": Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          10,
          11,
        },
        "deps": Array [
          Dep {
            "id": 10,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 11,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
        "getter": [Function],
        "id": 8,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": Object {},
        "vm": [Circular],
      },
    },
    "_data": Object {},
    "_directInactive": false,
    "_events": Object {},
    "_hasHookEvent": false,
    "_inactive": null,
    "_isBeingDestroyed": false,
    "_isDestroyed": false,
    "_isMounted": true,
    "_isVue": true,
    "_provided": Object {
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
    },
    "_renderProxy": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        [Circular],
      ],
      "$createElement": [Function],
      "$el": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "$_doNotStubChildren": true,
        "_Ctor": Object {
          "8": [Function],
        },
        "_base": [Function],
        "_isFunctionalContainer": undefined,
        "beforeCreate": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "beforeDestroy": Array [
          [Function],
        ],
        "components": Object {
          "transition": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "abstract": true,
              "name": "transition",
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
            },
            "abstract": true,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": "transition",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition-group": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "beforeMount": [Function],
              "methods": Object {
                "hasMove": [Function],
              },
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "updated": [Function],
            },
            "abstract": undefined,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": undefined,
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
        },
        "computed": Object {
          "errors": [Function],
          "fields": [Function],
        },
        "directives": Object {},
        "filters": Object {},
        "localVue": [Function],
        "methods": Object {},
        "mocks": Object {},
        "provide": [Function],
        "render": [Function],
        "shouldProxy": true,
        "stubs": Object {
          "transition": true,
          "transition-group": true,
        },
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "errors": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        "fields": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
      },
      "_data": Object {},
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": Object {
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
      },
      "_renderProxy": [Circular],
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 3,
      "_vnode": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": [Circular],
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {},
          "propsData": Object {
            "error": "This is error message",
            "mask": "",
            "value": "test",
          },
          "tag": undefined,
        },
        "context": [Circular],
        "data": Object {
          "attrs": Object {},
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "scopedSlots": Object {
            "_normalized": Object {},
          },
        },
        "elm": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-12-BaseInput",
        "text": undefined,
      },
      "_watcher": Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "fields": Object {},
    },
    "_self": [Circular],
    "_staticTrees": null,
    "_uid": 3,
    "_vnode": VNode {
      "asyncFactory": undefined,
      "asyncMeta": undefined,
      "children": undefined,
      "componentInstance": [Circular],
      "componentOptions": Object {
        "Ctor": [Function],
        "children": undefined,
        "listeners": Object {},
        "propsData": Object {
          "error": "This is error message",
          "mask": "",
          "value": "test",
        },
        "tag": undefined,
      },
      "context": [Circular],
      "data": Object {
        "attrs": Object {},
        "hook": Object {
          "destroy": [Function],
          "init": [Function],
          "insert": [Function],
          "prepatch": [Function],
        },
        "on": undefined,
        "pendingInsert": null,
        "scopedSlots": Object {
          "_normalized": Object {},
        },
      },
      "elm": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "fnContext": undefined,
      "fnOptions": undefined,
      "fnScopeId": undefined,
      "isAsyncPlaceholder": false,
      "isCloned": false,
      "isComment": false,
      "isOnce": false,
      "isRootInsert": true,
      "isStatic": false,
      "key": undefined,
      "ns": undefined,
      "parent": undefined,
      "raw": false,
      "tag": "vue-component-12-BaseInput",
      "text": undefined,
    },
    "_watcher": Watcher {
      "active": true,
      "before": [Function],
      "cb": [Function],
      "deep": false,
      "depIds": Set {},
      "deps": Array [],
      "dirty": false,
      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
      "getter": [Function],
      "id": 9,
      "lazy": false,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": undefined,
      "vm": [Circular],
    },
    "_watchers": Array [
      Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          42,
          43,
        },
        "deps": Array [
          Dep {
            "id": 42,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 43,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
        "getter": [Function],
        "id": 7,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          10,
          11,
        },
        "deps": Array [
          Dep {
            "id": 10,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 11,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
        "getter": [Function],
        "id": 8,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": Object {},
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
    ],
    "errors": ErrorBag {
      "items": Array [],
      "vmId": 3,
    },
    "fields": Object {},
  },
  "$scopedSlots": Object {},
  "$slots": Object {},
  "$validator": ScopedValidator {
    "_base": Validator {
      "errors": ErrorBag {
        "items": Array [],
        "vmId": null,
      },
      "fastExit": true,
      "fields": FieldBag {
        "items": Array [],
      },
      "paused": false,
    },
    "_paused": false,
    "errors": ErrorBag {
      "items": Array [],
      "vmId": 4,
    },
    "id": 4,
  },
  "$vnode": VNode {
    "asyncFactory": undefined,
    "asyncMeta": undefined,
    "children": undefined,
    "componentInstance": [Circular],
    "componentOptions": Object {
      "Ctor": [Function],
      "children": undefined,
      "listeners": Object {},
      "propsData": Object {
        "error": "This is error message",
        "mask": "",
        "value": "test",
      },
      "tag": undefined,
    },
    "context": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        [Circular],
      ],
      "$createElement": [Function],
      "$el": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "$_doNotStubChildren": true,
        "_Ctor": Object {
          "8": [Function],
        },
        "_base": [Function],
        "_isFunctionalContainer": undefined,
        "beforeCreate": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "beforeDestroy": Array [
          [Function],
        ],
        "components": Object {
          "transition": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "abstract": true,
              "name": "transition",
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
            },
            "abstract": true,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": "transition",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition-group": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "beforeMount": [Function],
              "methods": Object {
                "hasMove": [Function],
              },
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "updated": [Function],
            },
            "abstract": undefined,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": undefined,
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
        },
        "computed": Object {
          "errors": [Function],
          "fields": [Function],
        },
        "directives": Object {},
        "filters": Object {},
        "localVue": [Function],
        "methods": Object {},
        "mocks": Object {},
        "provide": [Function],
        "render": [Function],
        "shouldProxy": true,
        "stubs": Object {
          "transition": true,
          "transition-group": true,
        },
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "errors": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        "fields": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
      },
      "_data": Object {},
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": Object {
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
      },
      "_renderProxy": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": [Circular],
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": [Circular],
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 3,
      "_vnode": [Circular],
      "_watcher": Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "fields": Object {},
    },
    "data": Object {
      "attrs": Object {},
      "hook": Object {
        "destroy": [Function],
        "init": [Function],
        "insert": [Function],
        "prepatch": [Function],
      },
      "on": undefined,
      "pendingInsert": null,
      "scopedSlots": Object {
        "_normalized": Object {},
      },
    },
    "elm": <div
      class="base-input base-input--error"
    >
      <div
        class="base-input__wrapper"
      >
        <input
          autocomplete="on"
          class="base-input__main form-control is-danger"
          id=""
          maxlength=""
          min=""
          name=""
          placeholder=""
          type="text"
        />
         
        <span
          class="base-input__error"
        >
          This is error message
        </span>
      </div>
       
      <!---->
    </div>,
    "fnContext": undefined,
    "fnOptions": undefined,
    "fnScopeId": undefined,
    "isAsyncPlaceholder": false,
    "isCloned": false,
    "isComment": false,
    "isOnce": false,
    "isRootInsert": true,
    "isStatic": false,
    "key": undefined,
    "ns": undefined,
    "parent": undefined,
    "raw": false,
    "tag": "vue-component-12-BaseInput",
    "text": undefined,
  },
  "__emitted": Object {},
  "__emittedByOrder": Array [],
  "_c": [Function],
  "_computedWatchers": Object {
    "errors": Watcher {
      "active": true,
      "before": undefined,
      "cb": [Function],
      "deep": false,
      "depIds": Set {},
      "deps": Array [],
      "dirty": true,
      "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
      "getter": [Function],
      "id": 10,
      "lazy": true,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": undefined,
      "vm": [Circular],
    },
    "fields": Watcher {
      "active": true,
      "before": undefined,
      "cb": [Function],
      "deep": false,
      "depIds": Set {},
      "deps": Array [],
      "dirty": true,
      "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
      "getter": [Function],
      "id": 11,
      "lazy": true,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": undefined,
      "vm": [Circular],
    },
  },
  "_data": Object {
    "isComposing": false,
  },
  "_directInactive": false,
  "_events": Object {},
  "_hasHookEvent": false,
  "_inactive": null,
  "_isBeingDestroyed": false,
  "_isDestroyed": false,
  "_isMounted": true,
  "_isVue": true,
  "_props": Object {
    "autocomplete": "on",
    "disabled": false,
    "error": "This is error message",
    "helpText": "",
    "id": "",
    "inputClass": "",
    "inputType": "text",
    "mask": "",
    "maxLength": "",
    "min": "",
    "name": "",
    "placeholder": "",
    "value": "test",
  },
  "_provided": Object {
    "$validator": ScopedValidator {
      "_base": Validator {
        "errors": ErrorBag {
          "items": Array [],
          "vmId": null,
        },
        "fastExit": true,
        "fields": FieldBag {
          "items": Array [],
        },
        "paused": false,
      },
      "_paused": false,
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 4,
      },
      "id": 4,
    },
  },
  "_renderProxy": VueComponent {
    "$attrs": Object {},
    "$children": Array [],
    "$createElement": [Function],
    "$el": <div
      class="base-input base-input--error"
    >
      <div
        class="base-input__wrapper"
      >
        <input
          autocomplete="on"
          class="base-input__main form-control is-danger"
          id=""
          maxlength=""
          min=""
          name=""
          placeholder=""
          type="text"
        />
         
        <span
          class="base-input__error"
        >
          This is error message
        </span>
      </div>
       
      <!---->
    </div>,
    "$emit": [Function],
    "$listeners": Object {},
    "$options": Object {
      "_componentTag": undefined,
      "_parentListeners": Object {},
      "_parentVnode": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": [Circular],
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {},
          "propsData": Object {
            "error": "This is error message",
            "mask": "",
            "value": "test",
          },
          "tag": undefined,
        },
        "context": VueComponent {
          "$attrs": Object {},
          "$children": Array [
            [Circular],
          ],
          "$createElement": [Function],
          "$el": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "$emit": [Function],
          "$listeners": Object {},
          "$options": Object {
            "$_doNotStubChildren": true,
            "_Ctor": Object {
              "8": [Function],
            },
            "_base": [Function],
            "_isFunctionalContainer": undefined,
            "beforeCreate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "beforeDestroy": Array [
              [Function],
            ],
            "components": Object {
              "transition": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "abstract": true,
                  "name": "transition",
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                },
                "abstract": true,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": "transition",
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
              "transition-group": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "beforeMount": [Function],
                  "methods": Object {
                    "hasMove": [Function],
                  },
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "updated": [Function],
                },
                "abstract": undefined,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": undefined,
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
            },
            "computed": Object {
              "errors": [Function],
              "fields": [Function],
            },
            "directives": Object {},
            "filters": Object {},
            "localVue": [Function],
            "methods": Object {},
            "mocks": Object {},
            "provide": [Function],
            "render": [Function],
            "shouldProxy": true,
            "stubs": Object {
              "transition": true,
              "transition-group": true,
            },
          },
          "$parent": undefined,
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
          "$vnode": undefined,
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_computedWatchers": Object {
            "errors": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            "fields": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
          },
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {},
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_provided": Object {
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
          },
          "_renderProxy": VueComponent {
            "$attrs": Object {},
            "$children": Array [
              [Circular],
            ],
            "$createElement": [Function],
            "$el": <div
              class="base-input base-input--error"
            >
              <div
                class="base-input__wrapper"
              >
                <input
                  autocomplete="on"
                  class="base-input__main form-control is-danger"
                  id=""
                  maxlength=""
                  min=""
                  name=""
                  placeholder=""
                  type="text"
                />
                 
                <span
                  class="base-input__error"
                >
                  This is error message
                </span>
              </div>
               
              <!---->
            </div>,
            "$emit": [Function],
            "$listeners": Object {},
            "$options": Object {
              "$_doNotStubChildren": true,
              "_Ctor": Object {
                "8": [Function],
              },
              "_base": [Function],
              "_isFunctionalContainer": undefined,
              "beforeCreate": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "beforeDestroy": Array [
                [Function],
              ],
              "components": Object {
                "transition": Object {
                  "$_doNotStubChildren": true,
                  "$_vueTestUtils_original": Object {
                    "_Ctor": Object {
                      "2": [Function],
                      "8": [Function],
                    },
                    "abstract": true,
                    "name": "transition",
                    "props": Object {
                      "appear": Object {
                        "type": [Function],
                      },
                      "appearActiveClass": Object {
                        "type": [Function],
                      },
                      "appearClass": Object {
                        "type": [Function],
                      },
                      "appearToClass": Object {
                        "type": [Function],
                      },
                      "css": Object {
                        "type": [Function],
                      },
                      "duration": Object {
                        "type": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "enterActiveClass": Object {
                        "type": [Function],
                      },
                      "enterClass": Object {
                        "type": [Function],
                      },
                      "enterToClass": Object {
                        "type": [Function],
                      },
                      "leaveActiveClass": Object {
                        "type": [Function],
                      },
                      "leaveClass": Object {
                        "type": [Function],
                      },
                      "leaveToClass": Object {
                        "type": [Function],
                      },
                      "mode": Object {
                        "type": [Function],
                      },
                      "name": Object {
                        "type": [Function],
                      },
                      "type": Object {
                        "type": [Function],
                      },
                    },
                    "render": [Function],
                  },
                  "abstract": true,
                  "attrs": undefined,
                  "class": undefined,
                  "domProps": undefined,
                  "functional": undefined,
                  "key": undefined,
                  "model": undefined,
                  "name": "transition",
                  "nativeOn": undefined,
                  "normalizedStyle": undefined,
                  "on": undefined,
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "staticClass": undefined,
                  "staticStyle": undefined,
                  "style": undefined,
                },
                "transition-group": Object {
                  "$_doNotStubChildren": true,
                  "$_vueTestUtils_original": Object {
                    "_Ctor": Object {
                      "2": [Function],
                      "8": [Function],
                    },
                    "beforeMount": [Function],
                    "methods": Object {
                      "hasMove": [Function],
                    },
                    "props": Object {
                      "appear": Object {
                        "type": [Function],
                      },
                      "appearActiveClass": Object {
                        "type": [Function],
                      },
                      "appearClass": Object {
                        "type": [Function],
                      },
                      "appearToClass": Object {
                        "type": [Function],
                      },
                      "css": Object {
                        "type": [Function],
                      },
                      "duration": Object {
                        "type": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "enterActiveClass": Object {
                        "type": [Function],
                      },
                      "enterClass": Object {
                        "type": [Function],
                      },
                      "enterToClass": Object {
                        "type": [Function],
                      },
                      "leaveActiveClass": Object {
                        "type": [Function],
                      },
                      "leaveClass": Object {
                        "type": [Function],
                      },
                      "leaveToClass": Object {
                        "type": [Function],
                      },
                      "moveClass": Object {
                        "type": [Function],
                      },
                      "name": Object {
                        "type": [Function],
                      },
                      "tag": Object {
                        "type": [Function],
                      },
                      "type": Object {
                        "type": [Function],
                      },
                    },
                    "render": [Function],
                    "updated": [Function],
                  },
                  "abstract": undefined,
                  "attrs": undefined,
                  "class": undefined,
                  "domProps": undefined,
                  "functional": undefined,
                  "key": undefined,
                  "model": undefined,
                  "name": undefined,
                  "nativeOn": undefined,
                  "normalizedStyle": undefined,
                  "on": undefined,
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "staticClass": undefined,
                  "staticStyle": undefined,
                  "style": undefined,
                },
              },
              "computed": Object {
                "errors": [Function],
                "fields": [Function],
              },
              "directives": Object {},
              "filters": Object {},
              "localVue": [Function],
              "methods": Object {},
              "mocks": Object {},
              "provide": [Function],
              "render": [Function],
              "shouldProxy": true,
              "stubs": Object {
                "transition": true,
                "transition-group": true,
              },
            },
            "$parent": undefined,
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
            "$vnode": undefined,
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_computedWatchers": Object {
              "errors": Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  42,
                  43,
                },
                "deps": Array [
                  Dep {
                    "id": 42,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 43,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                "getter": [Function],
                "id": 7,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "vm": [Circular],
              },
              "fields": Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  10,
                  11,
                },
                "deps": Array [
                  Dep {
                    "id": 10,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 11,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                "getter": [Function],
                "id": 8,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": Object {},
                "vm": [Circular],
              },
            },
            "_data": Object {},
            "_directInactive": false,
            "_events": Object {},
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_provided": Object {
              "$validator": ScopedValidator {
                "_base": Validator {
                  "errors": ErrorBag {
                    "items": Array [],
                    "vmId": null,
                  },
                  "fastExit": true,
                  "fields": FieldBag {
                    "items": Array [],
                  },
                  "paused": false,
                },
                "_paused": false,
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "id": 3,
              },
            },
            "_renderProxy": [Circular],
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 3,
            "_vnode": [Circular],
            "_watcher": Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  42,
                  43,
                },
                "deps": Array [
                  Dep {
                    "id": 42,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 43,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                "getter": [Function],
                "id": 7,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  10,
                  11,
                },
                "deps": Array [
                  Dep {
                    "id": 10,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 11,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                "getter": [Function],
                "id": 8,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": Object {},
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "before": [Function],
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 9,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "fields": Object {},
          },
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 3,
          "_vnode": [Circular],
          "_watcher": Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "fields": Object {},
        },
        "data": Object {
          "attrs": Object {},
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "scopedSlots": Object {
            "_normalized": Object {},
          },
        },
        "elm": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-12-BaseInput",
        "text": undefined,
      },
      "_propKeys": Array [
        "value",
        "disabled",
        "name",
        "inputType",
        "error",
        "placeholder",
        "inputClass",
        "helpText",
        "autocomplete",
        "mask",
        "id",
        "maxLength",
        "min",
      ],
      "_renderChildren": undefined,
      "computed": Object {
        "errors": [Function],
        "fields": [Function],
      },
      "parent": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": VueComponent {
          "$attrs": Object {},
          "$children": Array [
            [Circular],
          ],
          "$createElement": [Function],
          "$el": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "$emit": [Function],
          "$listeners": Object {},
          "$options": Object {
            "$_doNotStubChildren": true,
            "_Ctor": Object {
              "8": [Function],
            },
            "_base": [Function],
            "_isFunctionalContainer": undefined,
            "beforeCreate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "beforeDestroy": Array [
              [Function],
            ],
            "components": Object {
              "transition": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "abstract": true,
                  "name": "transition",
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                },
                "abstract": true,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": "transition",
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
              "transition-group": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "beforeMount": [Function],
                  "methods": Object {
                    "hasMove": [Function],
                  },
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "updated": [Function],
                },
                "abstract": undefined,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": undefined,
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
            },
            "computed": Object {
              "errors": [Function],
              "fields": [Function],
            },
            "directives": Object {},
            "filters": Object {},
            "localVue": [Function],
            "methods": Object {},
            "mocks": Object {},
            "provide": [Function],
            "render": [Function],
            "shouldProxy": true,
            "stubs": Object {
              "transition": true,
              "transition-group": true,
            },
          },
          "$parent": undefined,
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
          "$vnode": undefined,
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_computedWatchers": Object {
            "errors": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            "fields": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
          },
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {},
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_provided": Object {
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
          },
          "_renderProxy": [Circular],
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 3,
          "_vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": [Circular],
            "componentOptions": Object {
              "Ctor": [Function],
              "children": undefined,
              "listeners": Object {},
              "propsData": Object {
                "error": "This is error message",
                "mask": "",
                "value": "test",
              },
              "tag": undefined,
            },
            "context": [Circular],
            "data": Object {
              "attrs": Object {},
              "hook": Object {
                "destroy": [Function],
                "init": [Function],
                "insert": [Function],
                "prepatch": [Function],
              },
              "on": undefined,
              "pendingInsert": null,
              "scopedSlots": Object {
                "_normalized": Object {},
              },
            },
            "elm": <div
              class="base-input base-input--error"
            >
              <div
                class="base-input__wrapper"
              >
                <input
                  autocomplete="on"
                  class="base-input__main form-control is-danger"
                  id=""
                  maxlength=""
                  min=""
                  name=""
                  placeholder=""
                  type="text"
                />
                 
                <span
                  class="base-input__error"
                >
                  This is error message
                </span>
              </div>
               
              <!---->
            </div>,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": true,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "vue-component-12-BaseInput",
            "text": undefined,
          },
          "_watcher": Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "fields": Object {},
        },
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": [Circular],
          "componentOptions": Object {
            "Ctor": [Function],
            "children": undefined,
            "listeners": Object {},
            "propsData": Object {
              "error": "This is error message",
              "mask": "",
              "value": "test",
            },
            "tag": undefined,
          },
          "context": [Circular],
          "data": Object {
            "attrs": Object {},
            "hook": Object {
              "destroy": [Function],
              "init": [Function],
              "insert": [Function],
              "prepatch": [Function],
            },
            "on": undefined,
            "pendingInsert": null,
            "scopedSlots": Object {
              "_normalized": Object {},
            },
          },
          "elm": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": true,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": "vue-component-12-BaseInput",
          "text": undefined,
        },
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "propsData": Object {
        "error": "This is error message",
        "mask": "",
        "value": "test",
      },
    },
    "$parent": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        [Circular],
      ],
      "$createElement": [Function],
      "$el": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "$_doNotStubChildren": true,
        "_Ctor": Object {
          "8": [Function],
        },
        "_base": [Function],
        "_isFunctionalContainer": undefined,
        "beforeCreate": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "beforeDestroy": Array [
          [Function],
        ],
        "components": Object {
          "transition": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "abstract": true,
              "name": "transition",
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
            },
            "abstract": true,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": "transition",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition-group": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "beforeMount": [Function],
              "methods": Object {
                "hasMove": [Function],
              },
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "updated": [Function],
            },
            "abstract": undefined,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": undefined,
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
        },
        "computed": Object {
          "errors": [Function],
          "fields": [Function],
        },
        "directives": Object {},
        "filters": Object {},
        "localVue": [Function],
        "methods": Object {},
        "mocks": Object {},
        "provide": [Function],
        "render": [Function],
        "shouldProxy": true,
        "stubs": Object {
          "transition": true,
          "transition-group": true,
        },
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "errors": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        "fields": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
      },
      "_data": Object {},
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": Object {
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
      },
      "_renderProxy": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": [Circular],
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": [Circular],
          "componentOptions": Object {
            "Ctor": [Function],
            "children": undefined,
            "listeners": Object {},
            "propsData": Object {
              "error": "This is error message",
              "mask": "",
              "value": "test",
            },
            "tag": undefined,
          },
          "context": [Circular],
          "data": Object {
            "attrs": Object {},
            "hook": Object {
              "destroy": [Function],
              "init": [Function],
              "insert": [Function],
              "prepatch": [Function],
            },
            "on": undefined,
            "pendingInsert": null,
            "scopedSlots": Object {
              "_normalized": Object {},
            },
          },
          "elm": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": true,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": "vue-component-12-BaseInput",
          "text": undefined,
        },
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 3,
      "_vnode": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": [Circular],
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {},
          "propsData": Object {
            "error": "This is error message",
            "mask": "",
            "value": "test",
          },
          "tag": undefined,
        },
        "context": [Circular],
        "data": Object {
          "attrs": Object {},
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "scopedSlots": Object {
            "_normalized": Object {},
          },
        },
        "elm": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-12-BaseInput",
        "text": undefined,
      },
      "_watcher": Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "fields": Object {},
    },
    "$refs": Object {
      "input": <input
        autocomplete="on"
        class="base-input__main form-control is-danger"
        id=""
        maxlength=""
        min=""
        name=""
        placeholder=""
        type="text"
      />,
    },
    "$root": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        [Circular],
      ],
      "$createElement": [Function],
      "$el": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "$_doNotStubChildren": true,
        "_Ctor": Object {
          "8": [Function],
        },
        "_base": [Function],
        "_isFunctionalContainer": undefined,
        "beforeCreate": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "beforeDestroy": Array [
          [Function],
        ],
        "components": Object {
          "transition": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "abstract": true,
              "name": "transition",
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
            },
            "abstract": true,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": "transition",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "mode": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition-group": Object {
            "$_doNotStubChildren": true,
            "$_vueTestUtils_original": Object {
              "_Ctor": Object {
                "2": [Function],
                "8": [Function],
              },
              "beforeMount": [Function],
              "methods": Object {
                "hasMove": [Function],
              },
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "updated": [Function],
            },
            "abstract": undefined,
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "model": undefined,
            "name": undefined,
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "appear": Object {
                "type": [Function],
              },
              "appearActiveClass": Object {
                "type": [Function],
              },
              "appearClass": Object {
                "type": [Function],
              },
              "appearToClass": Object {
                "type": [Function],
              },
              "css": Object {
                "type": [Function],
              },
              "duration": Object {
                "type": Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "enterActiveClass": Object {
                "type": [Function],
              },
              "enterClass": Object {
                "type": [Function],
              },
              "enterToClass": Object {
                "type": [Function],
              },
              "leaveActiveClass": Object {
                "type": [Function],
              },
              "leaveClass": Object {
                "type": [Function],
              },
              "leaveToClass": Object {
                "type": [Function],
              },
              "moveClass": Object {
                "type": [Function],
              },
              "name": Object {
                "type": [Function],
              },
              "tag": Object {
                "type": [Function],
              },
              "type": Object {
                "type": [Function],
              },
            },
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
        },
        "computed": Object {
          "errors": [Function],
          "fields": [Function],
        },
        "directives": Object {},
        "filters": Object {},
        "localVue": [Function],
        "methods": Object {},
        "mocks": Object {},
        "provide": [Function],
        "render": [Function],
        "shouldProxy": true,
        "stubs": Object {
          "transition": true,
          "transition-group": true,
        },
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "id": 3,
      },
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "errors": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        "fields": Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
      },
      "_data": Object {},
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": Object {
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
      },
      "_renderProxy": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": [Circular],
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": [Circular],
          "componentOptions": Object {
            "Ctor": [Function],
            "children": undefined,
            "listeners": Object {},
            "propsData": Object {
              "error": "This is error message",
              "mask": "",
              "value": "test",
            },
            "tag": undefined,
          },
          "context": [Circular],
          "data": Object {
            "attrs": Object {},
            "hook": Object {
              "destroy": [Function],
              "init": [Function],
              "insert": [Function],
              "prepatch": [Function],
            },
            "on": undefined,
            "pendingInsert": null,
            "scopedSlots": Object {
              "_normalized": Object {},
            },
          },
          "elm": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": true,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": "vue-component-12-BaseInput",
          "text": undefined,
        },
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 3,
      "_vnode": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": [Circular],
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {},
          "propsData": Object {
            "error": "This is error message",
            "mask": "",
            "value": "test",
          },
          "tag": undefined,
        },
        "context": [Circular],
        "data": Object {
          "attrs": Object {},
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "scopedSlots": Object {
            "_normalized": Object {},
          },
        },
        "elm": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-12-BaseInput",
        "text": undefined,
      },
      "_watcher": Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 9,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            42,
            43,
          },
          "deps": Array [
            Dep {
              "id": 42,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 43,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
          "getter": [Function],
          "id": 7,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": undefined,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            10,
            11,
          },
          "deps": Array [
            Dep {
              "id": 10,
              "subs": Array [
                [Circular],
              ],
            },
            Dep {
              "id": 11,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
          "getter": [Function],
          "id": 8,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": Object {},
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 3,
      },
      "fields": Object {},
    },
    "$scopedSlots": Object {},
    "$slots": Object {},
    "$validator": ScopedValidator {
      "_base": Validator {
        "errors": ErrorBag {
          "items": Array [],
          "vmId": null,
        },
        "fastExit": true,
        "fields": FieldBag {
          "items": Array [],
        },
        "paused": false,
      },
      "_paused": false,
      "errors": ErrorBag {
        "items": Array [],
        "vmId": 4,
      },
      "id": 4,
    },
    "$vnode": VNode {
      "asyncFactory": undefined,
      "asyncMeta": undefined,
      "children": undefined,
      "componentInstance": [Circular],
      "componentOptions": Object {
        "Ctor": [Function],
        "children": undefined,
        "listeners": Object {},
        "propsData": Object {
          "error": "This is error message",
          "mask": "",
          "value": "test",
        },
        "tag": undefined,
      },
      "context": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": VueComponent {
          "$attrs": Object {},
          "$children": Array [
            [Circular],
          ],
          "$createElement": [Function],
          "$el": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "$emit": [Function],
          "$listeners": Object {},
          "$options": Object {
            "$_doNotStubChildren": true,
            "_Ctor": Object {
              "8": [Function],
            },
            "_base": [Function],
            "_isFunctionalContainer": undefined,
            "beforeCreate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "beforeDestroy": Array [
              [Function],
            ],
            "components": Object {
              "transition": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "abstract": true,
                  "name": "transition",
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                },
                "abstract": true,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": "transition",
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
              "transition-group": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "beforeMount": [Function],
                  "methods": Object {
                    "hasMove": [Function],
                  },
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "updated": [Function],
                },
                "abstract": undefined,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": undefined,
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
            },
            "computed": Object {
              "errors": [Function],
              "fields": [Function],
            },
            "directives": Object {},
            "filters": Object {},
            "localVue": [Function],
            "methods": Object {},
            "mocks": Object {},
            "provide": [Function],
            "render": [Function],
            "shouldProxy": true,
            "stubs": Object {
              "transition": true,
              "transition-group": true,
            },
          },
          "$parent": undefined,
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
          "$vnode": undefined,
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_computedWatchers": Object {
            "errors": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            "fields": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
          },
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {},
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_provided": Object {
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
          },
          "_renderProxy": [Circular],
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 3,
          "_vnode": [Circular],
          "_watcher": Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "fields": Object {},
        },
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": [Circular],
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "data": Object {
        "attrs": Object {},
        "hook": Object {
          "destroy": [Function],
          "init": [Function],
          "insert": [Function],
          "prepatch": [Function],
        },
        "on": undefined,
        "pendingInsert": null,
        "scopedSlots": Object {
          "_normalized": Object {},
        },
      },
      "elm": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "fnContext": undefined,
      "fnOptions": undefined,
      "fnScopeId": undefined,
      "isAsyncPlaceholder": false,
      "isCloned": false,
      "isComment": false,
      "isOnce": false,
      "isRootInsert": true,
      "isStatic": false,
      "key": undefined,
      "ns": undefined,
      "parent": undefined,
      "raw": false,
      "tag": "vue-component-12-BaseInput",
      "text": undefined,
    },
    "__emitted": Object {},
    "__emittedByOrder": Array [],
    "_c": [Function],
    "_computedWatchers": Object {
      "errors": Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": true,
        "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
        "getter": [Function],
        "id": 10,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "fields": Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": true,
        "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
        "getter": [Function],
        "id": 11,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
    },
    "_data": Object {
      "isComposing": false,
    },
    "_directInactive": false,
    "_events": Object {},
    "_hasHookEvent": false,
    "_inactive": null,
    "_isBeingDestroyed": false,
    "_isDestroyed": false,
    "_isMounted": true,
    "_isVue": true,
    "_props": Object {
      "autocomplete": "on",
      "disabled": false,
      "error": "This is error message",
      "helpText": "",
      "id": "",
      "inputClass": "",
      "inputType": "text",
      "mask": "",
      "maxLength": "",
      "min": "",
      "name": "",
      "placeholder": "",
      "value": "test",
    },
    "_provided": Object {
      "$validator": ScopedValidator {
        "_base": Validator {
          "errors": ErrorBag {
            "items": Array [],
            "vmId": null,
          },
          "fastExit": true,
          "fields": FieldBag {
            "items": Array [],
          },
          "paused": false,
        },
        "_paused": false,
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 4,
        },
        "id": 4,
      },
    },
    "_renderProxy": [Circular],
    "_self": [Circular],
    "_staticTrees": null,
    "_uid": 4,
    "_vnode": VNode {
      "asyncFactory": undefined,
      "asyncMeta": undefined,
      "children": Array [
        VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": Array [
            VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": [Circular],
              "data": Object {
                "attrs": Object {
                  "autocomplete": "on",
                  "disabled": false,
                  "id": "",
                  "maxlength": "",
                  "min": "",
                  "name": "",
                  "placeholder": "",
                  "type": "text",
                },
                "class": Object {
                  "is-danger": "This is error message",
                  "tracking": false,
                },
                "directives": Array [
                  Object {
                    "def": Object {
                      "bind": [Function],
                      "componentUpdated": [Function],
                      "unbind": [Function],
                    },
                    "expression": "mask",
                    "modifiers": Object {},
                    "name": "mask",
                    "rawName": "v-mask",
                    "value": "",
                  },
                ],
                "domProps": Object {
                  "value": "test",
                },
                "on": Object {
                  "blur": [Function],
                  "input": [Function],
                  "keypress": [Function],
                  "keyup": [Function],
                },
                "ref": "input",
                "staticClass": "base-input__main form-control",
              },
              "elm": <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "input",
              "text": undefined,
            },
            VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": undefined,
              "data": undefined,
              "elm":  ,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": undefined,
              "text": " ",
            },
            VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": Array [
                VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": undefined,
                  "componentInstance": undefined,
                  "componentOptions": undefined,
                  "context": undefined,
                  "data": undefined,
                  "elm": This is error message,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": false,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": undefined,
                  "raw": false,
                  "tag": undefined,
                  "text": "This is error message",
                },
              ],
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": [Circular],
              "data": Object {
                "staticClass": "base-input__error",
              },
              "elm": <span
                class="base-input__error"
              >
                This is error message
              </span>,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "span",
              "text": undefined,
            },
          ],
          "componentInstance": undefined,
          "componentOptions": undefined,
          "context": [Circular],
          "data": Object {
            "staticClass": "base-input__wrapper",
          },
          "elm": <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": false,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": "div",
          "text": undefined,
        },
        VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": undefined,
          "componentOptions": undefined,
          "context": undefined,
          "data": undefined,
          "elm":  ,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": false,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": undefined,
          "text": " ",
        },
        VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": undefined,
          "componentOptions": undefined,
          "context": undefined,
          "data": undefined,
          "elm": <!---->,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": true,
          "isOnce": false,
          "isRootInsert": false,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": undefined,
          "text": "",
        },
      ],
      "componentInstance": undefined,
      "componentOptions": undefined,
      "context": [Circular],
      "data": Object {
        "class": Array [
          "base-input",
          Object {
            "base-input--help": "",
          },
          Object {
            "base-input--error": "This is error message",
          },
          "",
        ],
      },
      "elm": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "fnContext": undefined,
      "fnOptions": undefined,
      "fnScopeId": undefined,
      "isAsyncPlaceholder": false,
      "isCloned": false,
      "isComment": false,
      "isOnce": false,
      "isRootInsert": true,
      "isStatic": false,
      "key": undefined,
      "ns": undefined,
      "parent": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": [Circular],
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {},
          "propsData": Object {
            "error": "This is error message",
            "mask": "",
            "value": "test",
          },
          "tag": undefined,
        },
        "context": VueComponent {
          "$attrs": Object {},
          "$children": Array [
            [Circular],
          ],
          "$createElement": [Function],
          "$el": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "$emit": [Function],
          "$listeners": Object {},
          "$options": Object {
            "$_doNotStubChildren": true,
            "_Ctor": Object {
              "8": [Function],
            },
            "_base": [Function],
            "_isFunctionalContainer": undefined,
            "beforeCreate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "beforeDestroy": Array [
              [Function],
            ],
            "components": Object {
              "transition": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "abstract": true,
                  "name": "transition",
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                },
                "abstract": true,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": "transition",
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
              "transition-group": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "beforeMount": [Function],
                  "methods": Object {
                    "hasMove": [Function],
                  },
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "updated": [Function],
                },
                "abstract": undefined,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": undefined,
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
            },
            "computed": Object {
              "errors": [Function],
              "fields": [Function],
            },
            "directives": Object {},
            "filters": Object {},
            "localVue": [Function],
            "methods": Object {},
            "mocks": Object {},
            "provide": [Function],
            "render": [Function],
            "shouldProxy": true,
            "stubs": Object {
              "transition": true,
              "transition-group": true,
            },
          },
          "$parent": undefined,
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
          "$vnode": undefined,
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_computedWatchers": Object {
            "errors": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            "fields": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
          },
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {},
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_provided": Object {
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
          },
          "_renderProxy": VueComponent {
            "$attrs": Object {},
            "$children": Array [
              [Circular],
            ],
            "$createElement": [Function],
            "$el": <div
              class="base-input base-input--error"
            >
              <div
                class="base-input__wrapper"
              >
                <input
                  autocomplete="on"
                  class="base-input__main form-control is-danger"
                  id=""
                  maxlength=""
                  min=""
                  name=""
                  placeholder=""
                  type="text"
                />
                 
                <span
                  class="base-input__error"
                >
                  This is error message
                </span>
              </div>
               
              <!---->
            </div>,
            "$emit": [Function],
            "$listeners": Object {},
            "$options": Object {
              "$_doNotStubChildren": true,
              "_Ctor": Object {
                "8": [Function],
              },
              "_base": [Function],
              "_isFunctionalContainer": undefined,
              "beforeCreate": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "beforeDestroy": Array [
                [Function],
              ],
              "components": Object {
                "transition": Object {
                  "$_doNotStubChildren": true,
                  "$_vueTestUtils_original": Object {
                    "_Ctor": Object {
                      "2": [Function],
                      "8": [Function],
                    },
                    "abstract": true,
                    "name": "transition",
                    "props": Object {
                      "appear": Object {
                        "type": [Function],
                      },
                      "appearActiveClass": Object {
                        "type": [Function],
                      },
                      "appearClass": Object {
                        "type": [Function],
                      },
                      "appearToClass": Object {
                        "type": [Function],
                      },
                      "css": Object {
                        "type": [Function],
                      },
                      "duration": Object {
                        "type": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "enterActiveClass": Object {
                        "type": [Function],
                      },
                      "enterClass": Object {
                        "type": [Function],
                      },
                      "enterToClass": Object {
                        "type": [Function],
                      },
                      "leaveActiveClass": Object {
                        "type": [Function],
                      },
                      "leaveClass": Object {
                        "type": [Function],
                      },
                      "leaveToClass": Object {
                        "type": [Function],
                      },
                      "mode": Object {
                        "type": [Function],
                      },
                      "name": Object {
                        "type": [Function],
                      },
                      "type": Object {
                        "type": [Function],
                      },
                    },
                    "render": [Function],
                  },
                  "abstract": true,
                  "attrs": undefined,
                  "class": undefined,
                  "domProps": undefined,
                  "functional": undefined,
                  "key": undefined,
                  "model": undefined,
                  "name": "transition",
                  "nativeOn": undefined,
                  "normalizedStyle": undefined,
                  "on": undefined,
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "staticClass": undefined,
                  "staticStyle": undefined,
                  "style": undefined,
                },
                "transition-group": Object {
                  "$_doNotStubChildren": true,
                  "$_vueTestUtils_original": Object {
                    "_Ctor": Object {
                      "2": [Function],
                      "8": [Function],
                    },
                    "beforeMount": [Function],
                    "methods": Object {
                      "hasMove": [Function],
                    },
                    "props": Object {
                      "appear": Object {
                        "type": [Function],
                      },
                      "appearActiveClass": Object {
                        "type": [Function],
                      },
                      "appearClass": Object {
                        "type": [Function],
                      },
                      "appearToClass": Object {
                        "type": [Function],
                      },
                      "css": Object {
                        "type": [Function],
                      },
                      "duration": Object {
                        "type": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "enterActiveClass": Object {
                        "type": [Function],
                      },
                      "enterClass": Object {
                        "type": [Function],
                      },
                      "enterToClass": Object {
                        "type": [Function],
                      },
                      "leaveActiveClass": Object {
                        "type": [Function],
                      },
                      "leaveClass": Object {
                        "type": [Function],
                      },
                      "leaveToClass": Object {
                        "type": [Function],
                      },
                      "moveClass": Object {
                        "type": [Function],
                      },
                      "name": Object {
                        "type": [Function],
                      },
                      "tag": Object {
                        "type": [Function],
                      },
                      "type": Object {
                        "type": [Function],
                      },
                    },
                    "render": [Function],
                    "updated": [Function],
                  },
                  "abstract": undefined,
                  "attrs": undefined,
                  "class": undefined,
                  "domProps": undefined,
                  "functional": undefined,
                  "key": undefined,
                  "model": undefined,
                  "name": undefined,
                  "nativeOn": undefined,
                  "normalizedStyle": undefined,
                  "on": undefined,
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "staticClass": undefined,
                  "staticStyle": undefined,
                  "style": undefined,
                },
              },
              "computed": Object {
                "errors": [Function],
                "fields": [Function],
              },
              "directives": Object {},
              "filters": Object {},
              "localVue": [Function],
              "methods": Object {},
              "mocks": Object {},
              "provide": [Function],
              "render": [Function],
              "shouldProxy": true,
              "stubs": Object {
                "transition": true,
                "transition-group": true,
              },
            },
            "$parent": undefined,
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
            "$vnode": undefined,
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_computedWatchers": Object {
              "errors": Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  42,
                  43,
                },
                "deps": Array [
                  Dep {
                    "id": 42,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 43,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                "getter": [Function],
                "id": 7,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "vm": [Circular],
              },
              "fields": Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  10,
                  11,
                },
                "deps": Array [
                  Dep {
                    "id": 10,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 11,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                "getter": [Function],
                "id": 8,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": Object {},
                "vm": [Circular],
              },
            },
            "_data": Object {},
            "_directInactive": false,
            "_events": Object {},
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_provided": Object {
              "$validator": ScopedValidator {
                "_base": Validator {
                  "errors": ErrorBag {
                    "items": Array [],
                    "vmId": null,
                  },
                  "fastExit": true,
                  "fields": FieldBag {
                    "items": Array [],
                  },
                  "paused": false,
                },
                "_paused": false,
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "id": 3,
              },
            },
            "_renderProxy": [Circular],
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 3,
            "_vnode": [Circular],
            "_watcher": Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  42,
                  43,
                },
                "deps": Array [
                  Dep {
                    "id": 42,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 43,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                "getter": [Function],
                "id": 7,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "before": undefined,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  10,
                  11,
                },
                "deps": Array [
                  Dep {
                    "id": 10,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                  Dep {
                    "id": 11,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                "getter": [Function],
                "id": 8,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": Object {},
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "before": [Function],
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 9,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": false,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "fields": Object {},
          },
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 3,
          "_vnode": [Circular],
          "_watcher": Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "fields": Object {},
        },
        "data": Object {
          "attrs": Object {},
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "scopedSlots": Object {
            "_normalized": Object {},
          },
        },
        "elm": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-12-BaseInput",
        "text": undefined,
      },
      "raw": false,
      "tag": "div",
      "text": undefined,
    },
    "_watcher": Watcher {
      "active": true,
      "before": [Function],
      "cb": [Function],
      "deep": false,
      "depIds": Set {
        60,
        57,
        59,
        62,
        63,
        55,
        56,
        64,
        58,
        61,
        54,
        65,
        53,
      },
      "deps": Array [
        Dep {
          "id": 60,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 57,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 59,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 62,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 63,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 55,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 56,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 64,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 58,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 61,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 54,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 65,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 53,
          "subs": Array [
            [Circular],
          ],
        },
      ],
      "dirty": false,
      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
      "getter": [Function],
      "id": 12,
      "lazy": false,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": undefined,
      "vm": [Circular],
    },
    "_watchers": Array [
      Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": true,
        "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
        "getter": [Function],
        "id": 10,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "before": undefined,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": true,
        "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
        "getter": [Function],
        "id": 11,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "before": [Function],
        "cb": [Function],
        "deep": false,
        "depIds": Set {
          60,
          57,
          59,
          62,
          63,
          55,
          56,
          64,
          58,
          61,
          54,
          65,
          53,
        },
        "deps": Array [
          Dep {
            "id": 60,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 57,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 59,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 62,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 63,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 55,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 56,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 64,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 58,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 61,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 54,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 65,
            "subs": Array [
              [Circular],
            ],
          },
          Dep {
            "id": 53,
            "subs": Array [
              [Circular],
            ],
          },
        ],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 12,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": false,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
    ],
    "errors": ErrorBag {
      "items": Array [],
      "vmId": 4,
    },
    "fields": Object {},
    "handleBlur": [Function],
    "handleInput": [Function],
    "handleKeyPress": [Function],
    "handleKeyup": [Function],
    "isComposing": false,
  },
  "_self": [Circular],
  "_staticTrees": null,
  "_uid": 4,
  "_vnode": VNode {
    "asyncFactory": undefined,
    "asyncMeta": undefined,
    "children": Array [
      VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": Array [
          VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": undefined,
            "componentOptions": undefined,
            "context": [Circular],
            "data": Object {
              "attrs": Object {
                "autocomplete": "on",
                "disabled": false,
                "id": "",
                "maxlength": "",
                "min": "",
                "name": "",
                "placeholder": "",
                "type": "text",
              },
              "class": Object {
                "is-danger": "This is error message",
                "tracking": false,
              },
              "directives": Array [
                Object {
                  "def": Object {
                    "bind": [Function],
                    "componentUpdated": [Function],
                    "unbind": [Function],
                  },
                  "expression": "mask",
                  "modifiers": Object {},
                  "name": "mask",
                  "rawName": "v-mask",
                  "value": "",
                },
              ],
              "domProps": Object {
                "value": "test",
              },
              "on": Object {
                "blur": [Function],
                "input": [Function],
                "keypress": [Function],
                "keyup": [Function],
              },
              "ref": "input",
              "staticClass": "base-input__main form-control",
            },
            "elm": <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "input",
            "text": undefined,
          },
          VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": undefined,
            "componentOptions": undefined,
            "context": undefined,
            "data": undefined,
            "elm":  ,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": undefined,
            "text": " ",
          },
          VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": Array [
              VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": undefined,
                "componentOptions": undefined,
                "context": undefined,
                "data": undefined,
                "elm": This is error message,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": undefined,
                "text": "This is error message",
              },
            ],
            "componentInstance": undefined,
            "componentOptions": undefined,
            "context": [Circular],
            "data": Object {
              "staticClass": "base-input__error",
            },
            "elm": <span
              class="base-input__error"
            >
              This is error message
            </span>,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "span",
            "text": undefined,
          },
        ],
        "componentInstance": undefined,
        "componentOptions": undefined,
        "context": [Circular],
        "data": Object {
          "staticClass": "base-input__wrapper",
        },
        "elm": <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": false,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "div",
        "text": undefined,
      },
      VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": undefined,
        "componentOptions": undefined,
        "context": undefined,
        "data": undefined,
        "elm":  ,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": false,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": undefined,
        "text": " ",
      },
      VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": undefined,
        "componentOptions": undefined,
        "context": undefined,
        "data": undefined,
        "elm": <!---->,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": true,
        "isOnce": false,
        "isRootInsert": false,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": undefined,
        "text": "",
      },
    ],
    "componentInstance": undefined,
    "componentOptions": undefined,
    "context": [Circular],
    "data": Object {
      "class": Array [
        "base-input",
        Object {
          "base-input--help": "",
        },
        Object {
          "base-input--error": "This is error message",
        },
        "",
      ],
    },
    "elm": <div
      class="base-input base-input--error"
    >
      <div
        class="base-input__wrapper"
      >
        <input
          autocomplete="on"
          class="base-input__main form-control is-danger"
          id=""
          maxlength=""
          min=""
          name=""
          placeholder=""
          type="text"
        />
         
        <span
          class="base-input__error"
        >
          This is error message
        </span>
      </div>
       
      <!---->
    </div>,
    "fnContext": undefined,
    "fnOptions": undefined,
    "fnScopeId": undefined,
    "isAsyncPlaceholder": false,
    "isCloned": false,
    "isComment": false,
    "isOnce": false,
    "isRootInsert": true,
    "isStatic": false,
    "key": undefined,
    "ns": undefined,
    "parent": VNode {
      "asyncFactory": undefined,
      "asyncMeta": undefined,
      "children": undefined,
      "componentInstance": [Circular],
      "componentOptions": Object {
        "Ctor": [Function],
        "children": undefined,
        "listeners": Object {},
        "propsData": Object {
          "error": "This is error message",
          "mask": "",
          "value": "test",
        },
        "tag": undefined,
      },
      "context": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          [Circular],
        ],
        "$createElement": [Function],
        "$el": <div
          class="base-input base-input--error"
        >
          <div
            class="base-input__wrapper"
          >
            <input
              autocomplete="on"
              class="base-input__main form-control is-danger"
              id=""
              maxlength=""
              min=""
              name=""
              placeholder=""
              type="text"
            />
             
            <span
              class="base-input__error"
            >
              This is error message
            </span>
          </div>
           
          <!---->
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "$_doNotStubChildren": true,
          "_Ctor": Object {
            "8": [Function],
          },
          "_base": [Function],
          "_isFunctionalContainer": undefined,
          "beforeCreate": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "beforeDestroy": Array [
            [Function],
          ],
          "components": Object {
            "transition": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "abstract": true,
                "name": "transition",
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
              },
              "abstract": true,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": "transition",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "mode": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition-group": Object {
              "$_doNotStubChildren": true,
              "$_vueTestUtils_original": Object {
                "_Ctor": Object {
                  "2": [Function],
                  "8": [Function],
                },
                "beforeMount": [Function],
                "methods": Object {
                  "hasMove": [Function],
                },
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "updated": [Function],
              },
              "abstract": undefined,
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "model": undefined,
              "name": undefined,
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "appear": Object {
                  "type": [Function],
                },
                "appearActiveClass": Object {
                  "type": [Function],
                },
                "appearClass": Object {
                  "type": [Function],
                },
                "appearToClass": Object {
                  "type": [Function],
                },
                "css": Object {
                  "type": [Function],
                },
                "duration": Object {
                  "type": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "enterActiveClass": Object {
                  "type": [Function],
                },
                "enterClass": Object {
                  "type": [Function],
                },
                "enterToClass": Object {
                  "type": [Function],
                },
                "leaveActiveClass": Object {
                  "type": [Function],
                },
                "leaveClass": Object {
                  "type": [Function],
                },
                "leaveToClass": Object {
                  "type": [Function],
                },
                "moveClass": Object {
                  "type": [Function],
                },
                "name": Object {
                  "type": [Function],
                },
                "tag": Object {
                  "type": [Function],
                },
                "type": Object {
                  "type": [Function],
                },
              },
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
          },
          "computed": Object {
            "errors": [Function],
            "fields": [Function],
          },
          "directives": Object {},
          "filters": Object {},
          "localVue": [Function],
          "methods": Object {},
          "mocks": Object {},
          "provide": [Function],
          "render": [Function],
          "shouldProxy": true,
          "stubs": Object {
            "transition": true,
            "transition-group": true,
          },
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$validator": ScopedValidator {
          "_base": Validator {
            "errors": ErrorBag {
              "items": Array [],
              "vmId": null,
            },
            "fastExit": true,
            "fields": FieldBag {
              "items": Array [],
            },
            "paused": false,
          },
          "_paused": false,
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "id": 3,
        },
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "errors": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          "fields": Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                  Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      10,
                      11,
                    },
                    "deps": Array [
                      [Circular],
                      Dep {
                        "id": 11,
                        "subs": Array [
                          [Circular],
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                    "getter": [Function],
                    "id": 11,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": Object {},
                    "vm": [Circular],
                  },
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                  Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      10,
                      11,
                    },
                    "deps": Array [
                      Dep {
                        "id": 10,
                        "subs": Array [
                          [Circular],
                          [Circular],
                        ],
                      },
                      [Circular],
                    ],
                    "dirty": false,
                    "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                    "getter": [Function],
                    "id": 11,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": Object {},
                    "vm": [Circular],
                  },
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
        },
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": Object {
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
        },
        "_renderProxy": VueComponent {
          "$attrs": Object {},
          "$children": Array [
            [Circular],
          ],
          "$createElement": [Function],
          "$el": <div
            class="base-input base-input--error"
          >
            <div
              class="base-input__wrapper"
            >
              <input
                autocomplete="on"
                class="base-input__main form-control is-danger"
                id=""
                maxlength=""
                min=""
                name=""
                placeholder=""
                type="text"
              />
               
              <span
                class="base-input__error"
              >
                This is error message
              </span>
            </div>
             
            <!---->
          </div>,
          "$emit": [Function],
          "$listeners": Object {},
          "$options": Object {
            "$_doNotStubChildren": true,
            "_Ctor": Object {
              "8": [Function],
            },
            "_base": [Function],
            "_isFunctionalContainer": undefined,
            "beforeCreate": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "beforeDestroy": Array [
              [Function],
            ],
            "components": Object {
              "transition": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "abstract": true,
                  "name": "transition",
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "mode": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                },
                "abstract": true,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": "transition",
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "mode": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
              "transition-group": Object {
                "$_doNotStubChildren": true,
                "$_vueTestUtils_original": Object {
                  "_Ctor": Object {
                    "2": [Function],
                    "8": [Function],
                  },
                  "beforeMount": [Function],
                  "methods": Object {
                    "hasMove": [Function],
                  },
                  "props": Object {
                    "appear": Object {
                      "type": [Function],
                    },
                    "appearActiveClass": Object {
                      "type": [Function],
                    },
                    "appearClass": Object {
                      "type": [Function],
                    },
                    "appearToClass": Object {
                      "type": [Function],
                    },
                    "css": Object {
                      "type": [Function],
                    },
                    "duration": Object {
                      "type": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "enterActiveClass": Object {
                      "type": [Function],
                    },
                    "enterClass": Object {
                      "type": [Function],
                    },
                    "enterToClass": Object {
                      "type": [Function],
                    },
                    "leaveActiveClass": Object {
                      "type": [Function],
                    },
                    "leaveClass": Object {
                      "type": [Function],
                    },
                    "leaveToClass": Object {
                      "type": [Function],
                    },
                    "moveClass": Object {
                      "type": [Function],
                    },
                    "name": Object {
                      "type": [Function],
                    },
                    "tag": Object {
                      "type": [Function],
                    },
                    "type": Object {
                      "type": [Function],
                    },
                  },
                  "render": [Function],
                  "updated": [Function],
                },
                "abstract": undefined,
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "model": undefined,
                "name": undefined,
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "appear": Object {
                    "type": [Function],
                  },
                  "appearActiveClass": Object {
                    "type": [Function],
                  },
                  "appearClass": Object {
                    "type": [Function],
                  },
                  "appearToClass": Object {
                    "type": [Function],
                  },
                  "css": Object {
                    "type": [Function],
                  },
                  "duration": Object {
                    "type": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "enterActiveClass": Object {
                    "type": [Function],
                  },
                  "enterClass": Object {
                    "type": [Function],
                  },
                  "enterToClass": Object {
                    "type": [Function],
                  },
                  "leaveActiveClass": Object {
                    "type": [Function],
                  },
                  "leaveClass": Object {
                    "type": [Function],
                  },
                  "leaveToClass": Object {
                    "type": [Function],
                  },
                  "moveClass": Object {
                    "type": [Function],
                  },
                  "name": Object {
                    "type": [Function],
                  },
                  "tag": Object {
                    "type": [Function],
                  },
                  "type": Object {
                    "type": [Function],
                  },
                },
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
            },
            "computed": Object {
              "errors": [Function],
              "fields": [Function],
            },
            "directives": Object {},
            "filters": Object {},
            "localVue": [Function],
            "methods": Object {},
            "mocks": Object {},
            "provide": [Function],
            "render": [Function],
            "shouldProxy": true,
            "stubs": Object {
              "transition": true,
              "transition-group": true,
            },
          },
          "$parent": undefined,
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$validator": ScopedValidator {
            "_base": Validator {
              "errors": ErrorBag {
                "items": Array [],
                "vmId": null,
              },
              "fastExit": true,
              "fields": FieldBag {
                "items": Array [],
              },
              "paused": false,
            },
            "_paused": false,
            "errors": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "id": 3,
          },
          "$vnode": undefined,
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_computedWatchers": Object {
            "errors": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            "fields": Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                    Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        10,
                        11,
                      },
                      "deps": Array [
                        [Circular],
                        Dep {
                          "id": 11,
                          "subs": Array [
                            [Circular],
                            [Circular],
                          ],
                        },
                      ],
                      "dirty": false,
                      "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                      "getter": [Function],
                      "id": 11,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": Object {},
                      "vm": [Circular],
                    },
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                    Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        10,
                        11,
                      },
                      "deps": Array [
                        Dep {
                          "id": 10,
                          "subs": Array [
                            [Circular],
                            [Circular],
                          ],
                        },
                        [Circular],
                      ],
                      "dirty": false,
                      "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                      "getter": [Function],
                      "id": 11,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": Object {},
                      "vm": [Circular],
                    },
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
          },
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {},
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_provided": Object {
            "$validator": ScopedValidator {
              "_base": Validator {
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": null,
                },
                "fastExit": true,
                "fields": FieldBag {
                  "items": Array [],
                },
                "paused": false,
              },
              "_paused": false,
              "errors": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "id": 3,
            },
          },
          "_renderProxy": [Circular],
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 3,
          "_vnode": [Circular],
          "_watcher": Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                42,
                43,
              },
              "deps": Array [
                Dep {
                  "id": 42,
                  "subs": Array [
                    [Circular],
                  ],
                },
                Dep {
                  "id": 43,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
              "getter": [Function],
              "id": 7,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": ErrorBag {
                "items": Array [],
                "vmId": 3,
              },
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                    Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        10,
                        11,
                      },
                      "deps": Array [
                        [Circular],
                        Dep {
                          "id": 11,
                          "subs": Array [
                            [Circular],
                            [Circular],
                          ],
                        },
                      ],
                      "dirty": false,
                      "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                      "getter": [Function],
                      "id": 11,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": Object {},
                      "vm": [Circular],
                    },
                  ],
                },
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                    Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        10,
                        11,
                      },
                      "deps": Array [
                        Dep {
                          "id": 10,
                          "subs": Array [
                            [Circular],
                            [Circular],
                          ],
                        },
                        [Circular],
                      ],
                      "dirty": false,
                      "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                      "getter": [Function],
                      "id": 11,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": Object {},
                      "vm": [Circular],
                    },
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "before": [Function],
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 9,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
          "errors": ErrorBag {
            "items": Array [],
            "vmId": 3,
          },
          "fields": Object {},
        },
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 3,
        "_vnode": [Circular],
        "_watcher": Watcher {
          "active": true,
          "before": [Function],
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 9,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": false,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              42,
              43,
            },
            "deps": Array [
              Dep {
                "id": 42,
                "subs": Array [
                  [Circular],
                ],
              },
              Dep {
                "id": 43,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
            "getter": [Function],
            "id": 7,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": ErrorBag {
              "items": Array [],
              "vmId": 3,
            },
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": undefined,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              10,
              11,
            },
            "deps": Array [
              Dep {
                "id": 10,
                "subs": Array [
                  [Circular],
                  Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      10,
                      11,
                    },
                    "deps": Array [
                      [Circular],
                      Dep {
                        "id": 11,
                        "subs": Array [
                          [Circular],
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                    "getter": [Function],
                    "id": 11,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": Object {},
                    "vm": [Circular],
                  },
                ],
              },
              Dep {
                "id": 11,
                "subs": Array [
                  [Circular],
                  Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      10,
                      11,
                    },
                    "deps": Array [
                      Dep {
                        "id": 10,
                        "subs": Array [
                          [Circular],
                          [Circular],
                        ],
                      },
                      [Circular],
                    ],
                    "dirty": false,
                    "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
                    "getter": [Function],
                    "id": 11,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": Object {},
                    "vm": [Circular],
                  },
                ],
              },
            ],
            "dirty": false,
            "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
            "getter": [Function],
            "id": 8,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": Object {},
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "before": [Function],
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 9,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": false,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "errors": ErrorBag {
          "items": Array [],
          "vmId": 3,
        },
        "fields": Object {},
      },
      "data": Object {
        "attrs": Object {},
        "hook": Object {
          "destroy": [Function],
          "init": [Function],
          "insert": [Function],
          "prepatch": [Function],
        },
        "on": undefined,
        "pendingInsert": null,
        "scopedSlots": Object {
          "_normalized": Object {},
        },
      },
      "elm": <div
        class="base-input base-input--error"
      >
        <div
          class="base-input__wrapper"
        >
          <input
            autocomplete="on"
            class="base-input__main form-control is-danger"
            id=""
            maxlength=""
            min=""
            name=""
            placeholder=""
            type="text"
          />
           
          <span
            class="base-input__error"
          >
            This is error message
          </span>
        </div>
         
        <!---->
      </div>,
      "fnContext": undefined,
      "fnOptions": undefined,
      "fnScopeId": undefined,
      "isAsyncPlaceholder": false,
      "isCloned": false,
      "isComment": false,
      "isOnce": false,
      "isRootInsert": true,
      "isStatic": false,
      "key": undefined,
      "ns": undefined,
      "parent": undefined,
      "raw": false,
      "tag": "vue-component-12-BaseInput",
      "text": undefined,
    },
    "raw": false,
    "tag": "div",
    "text": undefined,
  },
  "_watcher": Watcher {
    "active": true,
    "before": [Function],
    "cb": [Function],
    "deep": false,
    "depIds": Set {
      60,
      57,
      59,
      62,
      63,
      55,
      56,
      64,
      58,
      61,
      54,
      65,
      53,
    },
    "deps": Array [
      Dep {
        "id": 60,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 57,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 59,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 62,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 63,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 55,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 56,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 64,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 58,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 61,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 54,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 65,
        "subs": Array [
          [Circular],
        ],
      },
      Dep {
        "id": 53,
        "subs": Array [
          [Circular],
        ],
      },
    ],
    "dirty": false,
    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
    "getter": [Function],
    "id": 12,
    "lazy": false,
    "newDepIds": Set {},
    "newDeps": Array [],
    "sync": false,
    "user": false,
    "value": undefined,
    "vm": [Circular],
  },
  "_watchers": Array [
    Watcher {
      "active": true,
      "before": undefined,
      "cb": [Function],
      "deep": false,
      "depIds": Set {
        49,
        50,
      },
      "deps": Array [
        Dep {
          "id": 49,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 50,
          "subs": Array [
            [Circular],
          ],
        },
      ],
      "dirty": false,
      "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
      "getter": [Function],
      "id": 10,
      "lazy": true,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": ErrorBag {
        "items": Array [],
        "vmId": 4,
      },
      "vm": [Circular],
    },
    Watcher {
      "active": true,
      "before": undefined,
      "cb": [Function],
      "deep": false,
      "depIds": Set {
        10,
        11,
      },
      "deps": Array [
        Dep {
          "id": 10,
          "subs": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                [Circular],
                Dep {
                  "id": 11,
                  "subs": Array [
                    [Circular],
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": VueComponent {
                "$attrs": Object {},
                "$children": Array [
                  [Circular],
                ],
                "$createElement": [Function],
                "$el": <div
                  class="base-input base-input--error"
                >
                  <div
                    class="base-input__wrapper"
                  >
                    <input
                      autocomplete="on"
                      class="base-input__main form-control is-danger"
                      id=""
                      maxlength=""
                      min=""
                      name=""
                      placeholder=""
                      type="text"
                    />
                     
                    <span
                      class="base-input__error"
                    >
                      This is error message
                    </span>
                  </div>
                   
                  <!---->
                </div>,
                "$emit": [Function],
                "$listeners": Object {},
                "$options": Object {
                  "$_doNotStubChildren": true,
                  "_Ctor": Object {
                    "8": [Function],
                  },
                  "_base": [Function],
                  "_isFunctionalContainer": undefined,
                  "beforeCreate": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "beforeDestroy": Array [
                    [Function],
                  ],
                  "components": Object {
                    "transition": Object {
                      "$_doNotStubChildren": true,
                      "$_vueTestUtils_original": Object {
                        "_Ctor": Object {
                          "2": [Function],
                          "8": [Function],
                        },
                        "abstract": true,
                        "name": "transition",
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "mode": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                      },
                      "abstract": true,
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "model": undefined,
                      "name": "transition",
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "appear": Object {
                          "type": [Function],
                        },
                        "appearActiveClass": Object {
                          "type": [Function],
                        },
                        "appearClass": Object {
                          "type": [Function],
                        },
                        "appearToClass": Object {
                          "type": [Function],
                        },
                        "css": Object {
                          "type": [Function],
                        },
                        "duration": Object {
                          "type": Array [
                            [Function],
                            [Function],
                            [Function],
                          ],
                        },
                        "enterActiveClass": Object {
                          "type": [Function],
                        },
                        "enterClass": Object {
                          "type": [Function],
                        },
                        "enterToClass": Object {
                          "type": [Function],
                        },
                        "leaveActiveClass": Object {
                          "type": [Function],
                        },
                        "leaveClass": Object {
                          "type": [Function],
                        },
                        "leaveToClass": Object {
                          "type": [Function],
                        },
                        "mode": Object {
                          "type": [Function],
                        },
                        "name": Object {
                          "type": [Function],
                        },
                        "type": Object {
                          "type": [Function],
                        },
                      },
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                    "transition-group": Object {
                      "$_doNotStubChildren": true,
                      "$_vueTestUtils_original": Object {
                        "_Ctor": Object {
                          "2": [Function],
                          "8": [Function],
                        },
                        "beforeMount": [Function],
                        "methods": Object {
                          "hasMove": [Function],
                        },
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "moveClass": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "tag": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                        "updated": [Function],
                      },
                      "abstract": undefined,
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "model": undefined,
                      "name": undefined,
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "appear": Object {
                          "type": [Function],
                        },
                        "appearActiveClass": Object {
                          "type": [Function],
                        },
                        "appearClass": Object {
                          "type": [Function],
                        },
                        "appearToClass": Object {
                          "type": [Function],
                        },
                        "css": Object {
                          "type": [Function],
                        },
                        "duration": Object {
                          "type": Array [
                            [Function],
                            [Function],
                            [Function],
                          ],
                        },
                        "enterActiveClass": Object {
                          "type": [Function],
                        },
                        "enterClass": Object {
                          "type": [Function],
                        },
                        "enterToClass": Object {
                          "type": [Function],
                        },
                        "leaveActiveClass": Object {
                          "type": [Function],
                        },
                        "leaveClass": Object {
                          "type": [Function],
                        },
                        "leaveToClass": Object {
                          "type": [Function],
                        },
                        "moveClass": Object {
                          "type": [Function],
                        },
                        "name": Object {
                          "type": [Function],
                        },
                        "tag": Object {
                          "type": [Function],
                        },
                        "type": Object {
                          "type": [Function],
                        },
                      },
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                  },
                  "computed": Object {
                    "errors": [Function],
                    "fields": [Function],
                  },
                  "directives": Object {},
                  "filters": Object {},
                  "localVue": [Function],
                  "methods": Object {},
                  "mocks": Object {},
                  "provide": [Function],
                  "render": [Function],
                  "shouldProxy": true,
                  "stubs": Object {
                    "transition": true,
                    "transition-group": true,
                  },
                },
                "$parent": undefined,
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$validator": ScopedValidator {
                  "_base": Validator {
                    "errors": ErrorBag {
                      "items": Array [],
                      "vmId": null,
                    },
                    "fastExit": true,
                    "fields": FieldBag {
                      "items": Array [],
                    },
                    "paused": false,
                  },
                  "_paused": false,
                  "errors": ErrorBag {
                    "items": Array [],
                    "vmId": 3,
                  },
                  "id": 3,
                },
                "$vnode": undefined,
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_computedWatchers": Object {
                  "errors": Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      42,
                      43,
                    },
                    "deps": Array [
                      Dep {
                        "id": 42,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                      Dep {
                        "id": 43,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "vm": [Circular],
                  },
                  "fields": [Circular],
                },
                "_data": Object {},
                "_directInactive": false,
                "_events": Object {},
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_provided": Object {
                  "$validator": ScopedValidator {
                    "_base": Validator {
                      "errors": ErrorBag {
                        "items": Array [],
                        "vmId": null,
                      },
                      "fastExit": true,
                      "fields": FieldBag {
                        "items": Array [],
                      },
                      "paused": false,
                    },
                    "_paused": false,
                    "errors": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "id": 3,
                  },
                },
                "_renderProxy": VueComponent {
                  "$attrs": Object {},
                  "$children": Array [
                    [Circular],
                  ],
                  "$createElement": [Function],
                  "$el": <div
                    class="base-input base-input--error"
                  >
                    <div
                      class="base-input__wrapper"
                    >
                      <input
                        autocomplete="on"
                        class="base-input__main form-control is-danger"
                        id=""
                        maxlength=""
                        min=""
                        name=""
                        placeholder=""
                        type="text"
                      />
                       
                      <span
                        class="base-input__error"
                      >
                        This is error message
                      </span>
                    </div>
                     
                    <!---->
                  </div>,
                  "$emit": [Function],
                  "$listeners": Object {},
                  "$options": Object {
                    "$_doNotStubChildren": true,
                    "_Ctor": Object {
                      "8": [Function],
                    },
                    "_base": [Function],
                    "_isFunctionalContainer": undefined,
                    "beforeCreate": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "beforeDestroy": Array [
                      [Function],
                    ],
                    "components": Object {
                      "transition": Object {
                        "$_doNotStubChildren": true,
                        "$_vueTestUtils_original": Object {
                          "_Ctor": Object {
                            "2": [Function],
                            "8": [Function],
                          },
                          "abstract": true,
                          "name": "transition",
                          "props": Object {
                            "appear": Object {
                              "type": [Function],
                            },
                            "appearActiveClass": Object {
                              "type": [Function],
                            },
                            "appearClass": Object {
                              "type": [Function],
                            },
                            "appearToClass": Object {
                              "type": [Function],
                            },
                            "css": Object {
                              "type": [Function],
                            },
                            "duration": Object {
                              "type": Array [
                                [Function],
                                [Function],
                                [Function],
                              ],
                            },
                            "enterActiveClass": Object {
                              "type": [Function],
                            },
                            "enterClass": Object {
                              "type": [Function],
                            },
                            "enterToClass": Object {
                              "type": [Function],
                            },
                            "leaveActiveClass": Object {
                              "type": [Function],
                            },
                            "leaveClass": Object {
                              "type": [Function],
                            },
                            "leaveToClass": Object {
                              "type": [Function],
                            },
                            "mode": Object {
                              "type": [Function],
                            },
                            "name": Object {
                              "type": [Function],
                            },
                            "type": Object {
                              "type": [Function],
                            },
                          },
                          "render": [Function],
                        },
                        "abstract": true,
                        "attrs": undefined,
                        "class": undefined,
                        "domProps": undefined,
                        "functional": undefined,
                        "key": undefined,
                        "model": undefined,
                        "name": "transition",
                        "nativeOn": undefined,
                        "normalizedStyle": undefined,
                        "on": undefined,
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "mode": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                        "staticClass": undefined,
                        "staticStyle": undefined,
                        "style": undefined,
                      },
                      "transition-group": Object {
                        "$_doNotStubChildren": true,
                        "$_vueTestUtils_original": Object {
                          "_Ctor": Object {
                            "2": [Function],
                            "8": [Function],
                          },
                          "beforeMount": [Function],
                          "methods": Object {
                            "hasMove": [Function],
                          },
                          "props": Object {
                            "appear": Object {
                              "type": [Function],
                            },
                            "appearActiveClass": Object {
                              "type": [Function],
                            },
                            "appearClass": Object {
                              "type": [Function],
                            },
                            "appearToClass": Object {
                              "type": [Function],
                            },
                            "css": Object {
                              "type": [Function],
                            },
                            "duration": Object {
                              "type": Array [
                                [Function],
                                [Function],
                                [Function],
                              ],
                            },
                            "enterActiveClass": Object {
                              "type": [Function],
                            },
                            "enterClass": Object {
                              "type": [Function],
                            },
                            "enterToClass": Object {
                              "type": [Function],
                            },
                            "leaveActiveClass": Object {
                              "type": [Function],
                            },
                            "leaveClass": Object {
                              "type": [Function],
                            },
                            "leaveToClass": Object {
                              "type": [Function],
                            },
                            "moveClass": Object {
                              "type": [Function],
                            },
                            "name": Object {
                              "type": [Function],
                            },
                            "tag": Object {
                              "type": [Function],
                            },
                            "type": Object {
                              "type": [Function],
                            },
                          },
                          "render": [Function],
                          "updated": [Function],
                        },
                        "abstract": undefined,
                        "attrs": undefined,
                        "class": undefined,
                        "domProps": undefined,
                        "functional": undefined,
                        "key": undefined,
                        "model": undefined,
                        "name": undefined,
                        "nativeOn": undefined,
                        "normalizedStyle": undefined,
                        "on": undefined,
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "moveClass": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "tag": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                        "staticClass": undefined,
                        "staticStyle": undefined,
                        "style": undefined,
                      },
                    },
                    "computed": Object {
                      "errors": [Function],
                      "fields": [Function],
                    },
                    "directives": Object {},
                    "filters": Object {},
                    "localVue": [Function],
                    "methods": Object {},
                    "mocks": Object {},
                    "provide": [Function],
                    "render": [Function],
                    "shouldProxy": true,
                    "stubs": Object {
                      "transition": true,
                      "transition-group": true,
                    },
                  },
                  "$parent": undefined,
                  "$refs": Object {},
                  "$root": [Circular],
                  "$scopedSlots": Object {},
                  "$slots": Object {},
                  "$validator": ScopedValidator {
                    "_base": Validator {
                      "errors": ErrorBag {
                        "items": Array [],
                        "vmId": null,
                      },
                      "fastExit": true,
                      "fields": FieldBag {
                        "items": Array [],
                      },
                      "paused": false,
                    },
                    "_paused": false,
                    "errors": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "id": 3,
                  },
                  "$vnode": undefined,
                  "__emitted": Object {},
                  "__emittedByOrder": Array [],
                  "_c": [Function],
                  "_computedWatchers": Object {
                    "errors": Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        42,
                        43,
                      },
                      "deps": Array [
                        Dep {
                          "id": 42,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                        Dep {
                          "id": 43,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                      ],
                      "dirty": false,
                      "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                      "getter": [Function],
                      "id": 7,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": ErrorBag {
                        "items": Array [],
                        "vmId": 3,
                      },
                      "vm": [Circular],
                    },
                    "fields": [Circular],
                  },
                  "_data": Object {},
                  "_directInactive": false,
                  "_events": Object {},
                  "_hasHookEvent": false,
                  "_inactive": null,
                  "_isBeingDestroyed": false,
                  "_isDestroyed": false,
                  "_isMounted": true,
                  "_isVue": true,
                  "_provided": Object {
                    "$validator": ScopedValidator {
                      "_base": Validator {
                        "errors": ErrorBag {
                          "items": Array [],
                          "vmId": null,
                        },
                        "fastExit": true,
                        "fields": FieldBag {
                          "items": Array [],
                        },
                        "paused": false,
                      },
                      "_paused": false,
                      "errors": ErrorBag {
                        "items": Array [],
                        "vmId": 3,
                      },
                      "id": 3,
                    },
                  },
                  "_renderProxy": [Circular],
                  "_self": [Circular],
                  "_staticTrees": null,
                  "_uid": 3,
                  "_vnode": VNode {
                    "asyncFactory": undefined,
                    "asyncMeta": undefined,
                    "children": undefined,
                    "componentInstance": [Circular],
                    "componentOptions": Object {
                      "Ctor": [Function],
                      "children": undefined,
                      "listeners": Object {},
                      "propsData": Object {
                        "error": "This is error message",
                        "mask": "",
                        "value": "test",
                      },
                      "tag": undefined,
                    },
                    "context": [Circular],
                    "data": Object {
                      "attrs": Object {},
                      "hook": Object {
                        "destroy": [Function],
                        "init": [Function],
                        "insert": [Function],
                        "prepatch": [Function],
                      },
                      "on": undefined,
                      "pendingInsert": null,
                      "scopedSlots": Object {
                        "_normalized": Object {},
                      },
                    },
                    "elm": <div
                      class="base-input base-input--error"
                    >
                      <div
                        class="base-input__wrapper"
                      >
                        <input
                          autocomplete="on"
                          class="base-input__main form-control is-danger"
                          id=""
                          maxlength=""
                          min=""
                          name=""
                          placeholder=""
                          type="text"
                        />
                         
                        <span
                          class="base-input__error"
                        >
                          This is error message
                        </span>
                      </div>
                       
                      <!---->
                    </div>,
                    "fnContext": undefined,
                    "fnOptions": undefined,
                    "fnScopeId": undefined,
                    "isAsyncPlaceholder": false,
                    "isCloned": false,
                    "isComment": false,
                    "isOnce": false,
                    "isRootInsert": true,
                    "isStatic": false,
                    "key": undefined,
                    "ns": undefined,
                    "parent": undefined,
                    "raw": false,
                    "tag": "vue-component-12-BaseInput",
                    "text": undefined,
                  },
                  "_watcher": Watcher {
                    "active": true,
                    "before": [Function],
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 9,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "_watchers": Array [
                    Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        42,
                        43,
                      },
                      "deps": Array [
                        Dep {
                          "id": 42,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                        Dep {
                          "id": 43,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                      ],
                      "dirty": false,
                      "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                      "getter": [Function],
                      "id": 7,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": ErrorBag {
                        "items": Array [],
                        "vmId": 3,
                      },
                      "vm": [Circular],
                    },
                    [Circular],
                    Watcher {
                      "active": true,
                      "before": [Function],
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                      "getter": [Function],
                      "id": 9,
                      "lazy": false,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                  ],
                  "errors": ErrorBag {
                    "items": Array [],
                    "vmId": 3,
                  },
                  "fields": Object {},
                },
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 3,
                "_vnode": VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": undefined,
                  "componentInstance": [Circular],
                  "componentOptions": Object {
                    "Ctor": [Function],
                    "children": undefined,
                    "listeners": Object {},
                    "propsData": Object {
                      "error": "This is error message",
                      "mask": "",
                      "value": "test",
                    },
                    "tag": undefined,
                  },
                  "context": [Circular],
                  "data": Object {
                    "attrs": Object {},
                    "hook": Object {
                      "destroy": [Function],
                      "init": [Function],
                      "insert": [Function],
                      "prepatch": [Function],
                    },
                    "on": undefined,
                    "pendingInsert": null,
                    "scopedSlots": Object {
                      "_normalized": Object {},
                    },
                  },
                  "elm": <div
                    class="base-input base-input--error"
                  >
                    <div
                      class="base-input__wrapper"
                    >
                      <input
                        autocomplete="on"
                        class="base-input__main form-control is-danger"
                        id=""
                        maxlength=""
                        min=""
                        name=""
                        placeholder=""
                        type="text"
                      />
                       
                      <span
                        class="base-input__error"
                      >
                        This is error message
                      </span>
                    </div>
                     
                    <!---->
                  </div>,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": true,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": undefined,
                  "raw": false,
                  "tag": "vue-component-12-BaseInput",
                  "text": undefined,
                },
                "_watcher": Watcher {
                  "active": true,
                  "before": [Function],
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 9,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": false,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      42,
                      43,
                    },
                    "deps": Array [
                      Dep {
                        "id": 42,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                      Dep {
                        "id": 43,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "vm": [Circular],
                  },
                  [Circular],
                  Watcher {
                    "active": true,
                    "before": [Function],
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 9,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "fields": Object {},
              },
            },
            [Circular],
          ],
        },
        Dep {
          "id": 11,
          "subs": Array [
            Watcher {
              "active": true,
              "before": undefined,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                10,
                11,
              },
              "deps": Array [
                Dep {
                  "id": 10,
                  "subs": Array [
                    [Circular],
                    [Circular],
                  ],
                },
                [Circular],
              ],
              "dirty": false,
              "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
              "getter": [Function],
              "id": 8,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": false,
              "user": false,
              "value": Object {},
              "vm": VueComponent {
                "$attrs": Object {},
                "$children": Array [
                  [Circular],
                ],
                "$createElement": [Function],
                "$el": <div
                  class="base-input base-input--error"
                >
                  <div
                    class="base-input__wrapper"
                  >
                    <input
                      autocomplete="on"
                      class="base-input__main form-control is-danger"
                      id=""
                      maxlength=""
                      min=""
                      name=""
                      placeholder=""
                      type="text"
                    />
                     
                    <span
                      class="base-input__error"
                    >
                      This is error message
                    </span>
                  </div>
                   
                  <!---->
                </div>,
                "$emit": [Function],
                "$listeners": Object {},
                "$options": Object {
                  "$_doNotStubChildren": true,
                  "_Ctor": Object {
                    "8": [Function],
                  },
                  "_base": [Function],
                  "_isFunctionalContainer": undefined,
                  "beforeCreate": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "beforeDestroy": Array [
                    [Function],
                  ],
                  "components": Object {
                    "transition": Object {
                      "$_doNotStubChildren": true,
                      "$_vueTestUtils_original": Object {
                        "_Ctor": Object {
                          "2": [Function],
                          "8": [Function],
                        },
                        "abstract": true,
                        "name": "transition",
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "mode": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                      },
                      "abstract": true,
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "model": undefined,
                      "name": "transition",
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "appear": Object {
                          "type": [Function],
                        },
                        "appearActiveClass": Object {
                          "type": [Function],
                        },
                        "appearClass": Object {
                          "type": [Function],
                        },
                        "appearToClass": Object {
                          "type": [Function],
                        },
                        "css": Object {
                          "type": [Function],
                        },
                        "duration": Object {
                          "type": Array [
                            [Function],
                            [Function],
                            [Function],
                          ],
                        },
                        "enterActiveClass": Object {
                          "type": [Function],
                        },
                        "enterClass": Object {
                          "type": [Function],
                        },
                        "enterToClass": Object {
                          "type": [Function],
                        },
                        "leaveActiveClass": Object {
                          "type": [Function],
                        },
                        "leaveClass": Object {
                          "type": [Function],
                        },
                        "leaveToClass": Object {
                          "type": [Function],
                        },
                        "mode": Object {
                          "type": [Function],
                        },
                        "name": Object {
                          "type": [Function],
                        },
                        "type": Object {
                          "type": [Function],
                        },
                      },
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                    "transition-group": Object {
                      "$_doNotStubChildren": true,
                      "$_vueTestUtils_original": Object {
                        "_Ctor": Object {
                          "2": [Function],
                          "8": [Function],
                        },
                        "beforeMount": [Function],
                        "methods": Object {
                          "hasMove": [Function],
                        },
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "moveClass": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "tag": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                        "updated": [Function],
                      },
                      "abstract": undefined,
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "model": undefined,
                      "name": undefined,
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "appear": Object {
                          "type": [Function],
                        },
                        "appearActiveClass": Object {
                          "type": [Function],
                        },
                        "appearClass": Object {
                          "type": [Function],
                        },
                        "appearToClass": Object {
                          "type": [Function],
                        },
                        "css": Object {
                          "type": [Function],
                        },
                        "duration": Object {
                          "type": Array [
                            [Function],
                            [Function],
                            [Function],
                          ],
                        },
                        "enterActiveClass": Object {
                          "type": [Function],
                        },
                        "enterClass": Object {
                          "type": [Function],
                        },
                        "enterToClass": Object {
                          "type": [Function],
                        },
                        "leaveActiveClass": Object {
                          "type": [Function],
                        },
                        "leaveClass": Object {
                          "type": [Function],
                        },
                        "leaveToClass": Object {
                          "type": [Function],
                        },
                        "moveClass": Object {
                          "type": [Function],
                        },
                        "name": Object {
                          "type": [Function],
                        },
                        "tag": Object {
                          "type": [Function],
                        },
                        "type": Object {
                          "type": [Function],
                        },
                      },
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                  },
                  "computed": Object {
                    "errors": [Function],
                    "fields": [Function],
                  },
                  "directives": Object {},
                  "filters": Object {},
                  "localVue": [Function],
                  "methods": Object {},
                  "mocks": Object {},
                  "provide": [Function],
                  "render": [Function],
                  "shouldProxy": true,
                  "stubs": Object {
                    "transition": true,
                    "transition-group": true,
                  },
                },
                "$parent": undefined,
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$validator": ScopedValidator {
                  "_base": Validator {
                    "errors": ErrorBag {
                      "items": Array [],
                      "vmId": null,
                    },
                    "fastExit": true,
                    "fields": FieldBag {
                      "items": Array [],
                    },
                    "paused": false,
                  },
                  "_paused": false,
                  "errors": ErrorBag {
                    "items": Array [],
                    "vmId": 3,
                  },
                  "id": 3,
                },
                "$vnode": undefined,
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_computedWatchers": Object {
                  "errors": Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      42,
                      43,
                    },
                    "deps": Array [
                      Dep {
                        "id": 42,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                      Dep {
                        "id": 43,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "vm": [Circular],
                  },
                  "fields": [Circular],
                },
                "_data": Object {},
                "_directInactive": false,
                "_events": Object {},
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_provided": Object {
                  "$validator": ScopedValidator {
                    "_base": Validator {
                      "errors": ErrorBag {
                        "items": Array [],
                        "vmId": null,
                      },
                      "fastExit": true,
                      "fields": FieldBag {
                        "items": Array [],
                      },
                      "paused": false,
                    },
                    "_paused": false,
                    "errors": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "id": 3,
                  },
                },
                "_renderProxy": VueComponent {
                  "$attrs": Object {},
                  "$children": Array [
                    [Circular],
                  ],
                  "$createElement": [Function],
                  "$el": <div
                    class="base-input base-input--error"
                  >
                    <div
                      class="base-input__wrapper"
                    >
                      <input
                        autocomplete="on"
                        class="base-input__main form-control is-danger"
                        id=""
                        maxlength=""
                        min=""
                        name=""
                        placeholder=""
                        type="text"
                      />
                       
                      <span
                        class="base-input__error"
                      >
                        This is error message
                      </span>
                    </div>
                     
                    <!---->
                  </div>,
                  "$emit": [Function],
                  "$listeners": Object {},
                  "$options": Object {
                    "$_doNotStubChildren": true,
                    "_Ctor": Object {
                      "8": [Function],
                    },
                    "_base": [Function],
                    "_isFunctionalContainer": undefined,
                    "beforeCreate": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "beforeDestroy": Array [
                      [Function],
                    ],
                    "components": Object {
                      "transition": Object {
                        "$_doNotStubChildren": true,
                        "$_vueTestUtils_original": Object {
                          "_Ctor": Object {
                            "2": [Function],
                            "8": [Function],
                          },
                          "abstract": true,
                          "name": "transition",
                          "props": Object {
                            "appear": Object {
                              "type": [Function],
                            },
                            "appearActiveClass": Object {
                              "type": [Function],
                            },
                            "appearClass": Object {
                              "type": [Function],
                            },
                            "appearToClass": Object {
                              "type": [Function],
                            },
                            "css": Object {
                              "type": [Function],
                            },
                            "duration": Object {
                              "type": Array [
                                [Function],
                                [Function],
                                [Function],
                              ],
                            },
                            "enterActiveClass": Object {
                              "type": [Function],
                            },
                            "enterClass": Object {
                              "type": [Function],
                            },
                            "enterToClass": Object {
                              "type": [Function],
                            },
                            "leaveActiveClass": Object {
                              "type": [Function],
                            },
                            "leaveClass": Object {
                              "type": [Function],
                            },
                            "leaveToClass": Object {
                              "type": [Function],
                            },
                            "mode": Object {
                              "type": [Function],
                            },
                            "name": Object {
                              "type": [Function],
                            },
                            "type": Object {
                              "type": [Function],
                            },
                          },
                          "render": [Function],
                        },
                        "abstract": true,
                        "attrs": undefined,
                        "class": undefined,
                        "domProps": undefined,
                        "functional": undefined,
                        "key": undefined,
                        "model": undefined,
                        "name": "transition",
                        "nativeOn": undefined,
                        "normalizedStyle": undefined,
                        "on": undefined,
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "mode": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                        "staticClass": undefined,
                        "staticStyle": undefined,
                        "style": undefined,
                      },
                      "transition-group": Object {
                        "$_doNotStubChildren": true,
                        "$_vueTestUtils_original": Object {
                          "_Ctor": Object {
                            "2": [Function],
                            "8": [Function],
                          },
                          "beforeMount": [Function],
                          "methods": Object {
                            "hasMove": [Function],
                          },
                          "props": Object {
                            "appear": Object {
                              "type": [Function],
                            },
                            "appearActiveClass": Object {
                              "type": [Function],
                            },
                            "appearClass": Object {
                              "type": [Function],
                            },
                            "appearToClass": Object {
                              "type": [Function],
                            },
                            "css": Object {
                              "type": [Function],
                            },
                            "duration": Object {
                              "type": Array [
                                [Function],
                                [Function],
                                [Function],
                              ],
                            },
                            "enterActiveClass": Object {
                              "type": [Function],
                            },
                            "enterClass": Object {
                              "type": [Function],
                            },
                            "enterToClass": Object {
                              "type": [Function],
                            },
                            "leaveActiveClass": Object {
                              "type": [Function],
                            },
                            "leaveClass": Object {
                              "type": [Function],
                            },
                            "leaveToClass": Object {
                              "type": [Function],
                            },
                            "moveClass": Object {
                              "type": [Function],
                            },
                            "name": Object {
                              "type": [Function],
                            },
                            "tag": Object {
                              "type": [Function],
                            },
                            "type": Object {
                              "type": [Function],
                            },
                          },
                          "render": [Function],
                          "updated": [Function],
                        },
                        "abstract": undefined,
                        "attrs": undefined,
                        "class": undefined,
                        "domProps": undefined,
                        "functional": undefined,
                        "key": undefined,
                        "model": undefined,
                        "name": undefined,
                        "nativeOn": undefined,
                        "normalizedStyle": undefined,
                        "on": undefined,
                        "props": Object {
                          "appear": Object {
                            "type": [Function],
                          },
                          "appearActiveClass": Object {
                            "type": [Function],
                          },
                          "appearClass": Object {
                            "type": [Function],
                          },
                          "appearToClass": Object {
                            "type": [Function],
                          },
                          "css": Object {
                            "type": [Function],
                          },
                          "duration": Object {
                            "type": Array [
                              [Function],
                              [Function],
                              [Function],
                            ],
                          },
                          "enterActiveClass": Object {
                            "type": [Function],
                          },
                          "enterClass": Object {
                            "type": [Function],
                          },
                          "enterToClass": Object {
                            "type": [Function],
                          },
                          "leaveActiveClass": Object {
                            "type": [Function],
                          },
                          "leaveClass": Object {
                            "type": [Function],
                          },
                          "leaveToClass": Object {
                            "type": [Function],
                          },
                          "moveClass": Object {
                            "type": [Function],
                          },
                          "name": Object {
                            "type": [Function],
                          },
                          "tag": Object {
                            "type": [Function],
                          },
                          "type": Object {
                            "type": [Function],
                          },
                        },
                        "render": [Function],
                        "staticClass": undefined,
                        "staticStyle": undefined,
                        "style": undefined,
                      },
                    },
                    "computed": Object {
                      "errors": [Function],
                      "fields": [Function],
                    },
                    "directives": Object {},
                    "filters": Object {},
                    "localVue": [Function],
                    "methods": Object {},
                    "mocks": Object {},
                    "provide": [Function],
                    "render": [Function],
                    "shouldProxy": true,
                    "stubs": Object {
                      "transition": true,
                      "transition-group": true,
                    },
                  },
                  "$parent": undefined,
                  "$refs": Object {},
                  "$root": [Circular],
                  "$scopedSlots": Object {},
                  "$slots": Object {},
                  "$validator": ScopedValidator {
                    "_base": Validator {
                      "errors": ErrorBag {
                        "items": Array [],
                        "vmId": null,
                      },
                      "fastExit": true,
                      "fields": FieldBag {
                        "items": Array [],
                      },
                      "paused": false,
                    },
                    "_paused": false,
                    "errors": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "id": 3,
                  },
                  "$vnode": undefined,
                  "__emitted": Object {},
                  "__emittedByOrder": Array [],
                  "_c": [Function],
                  "_computedWatchers": Object {
                    "errors": Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        42,
                        43,
                      },
                      "deps": Array [
                        Dep {
                          "id": 42,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                        Dep {
                          "id": 43,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                      ],
                      "dirty": false,
                      "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                      "getter": [Function],
                      "id": 7,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": ErrorBag {
                        "items": Array [],
                        "vmId": 3,
                      },
                      "vm": [Circular],
                    },
                    "fields": [Circular],
                  },
                  "_data": Object {},
                  "_directInactive": false,
                  "_events": Object {},
                  "_hasHookEvent": false,
                  "_inactive": null,
                  "_isBeingDestroyed": false,
                  "_isDestroyed": false,
                  "_isMounted": true,
                  "_isVue": true,
                  "_provided": Object {
                    "$validator": ScopedValidator {
                      "_base": Validator {
                        "errors": ErrorBag {
                          "items": Array [],
                          "vmId": null,
                        },
                        "fastExit": true,
                        "fields": FieldBag {
                          "items": Array [],
                        },
                        "paused": false,
                      },
                      "_paused": false,
                      "errors": ErrorBag {
                        "items": Array [],
                        "vmId": 3,
                      },
                      "id": 3,
                    },
                  },
                  "_renderProxy": [Circular],
                  "_self": [Circular],
                  "_staticTrees": null,
                  "_uid": 3,
                  "_vnode": VNode {
                    "asyncFactory": undefined,
                    "asyncMeta": undefined,
                    "children": undefined,
                    "componentInstance": [Circular],
                    "componentOptions": Object {
                      "Ctor": [Function],
                      "children": undefined,
                      "listeners": Object {},
                      "propsData": Object {
                        "error": "This is error message",
                        "mask": "",
                        "value": "test",
                      },
                      "tag": undefined,
                    },
                    "context": [Circular],
                    "data": Object {
                      "attrs": Object {},
                      "hook": Object {
                        "destroy": [Function],
                        "init": [Function],
                        "insert": [Function],
                        "prepatch": [Function],
                      },
                      "on": undefined,
                      "pendingInsert": null,
                      "scopedSlots": Object {
                        "_normalized": Object {},
                      },
                    },
                    "elm": <div
                      class="base-input base-input--error"
                    >
                      <div
                        class="base-input__wrapper"
                      >
                        <input
                          autocomplete="on"
                          class="base-input__main form-control is-danger"
                          id=""
                          maxlength=""
                          min=""
                          name=""
                          placeholder=""
                          type="text"
                        />
                         
                        <span
                          class="base-input__error"
                        >
                          This is error message
                        </span>
                      </div>
                       
                      <!---->
                    </div>,
                    "fnContext": undefined,
                    "fnOptions": undefined,
                    "fnScopeId": undefined,
                    "isAsyncPlaceholder": false,
                    "isCloned": false,
                    "isComment": false,
                    "isOnce": false,
                    "isRootInsert": true,
                    "isStatic": false,
                    "key": undefined,
                    "ns": undefined,
                    "parent": undefined,
                    "raw": false,
                    "tag": "vue-component-12-BaseInput",
                    "text": undefined,
                  },
                  "_watcher": Watcher {
                    "active": true,
                    "before": [Function],
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 9,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "_watchers": Array [
                    Watcher {
                      "active": true,
                      "before": undefined,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        42,
                        43,
                      },
                      "deps": Array [
                        Dep {
                          "id": 42,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                        Dep {
                          "id": 43,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                      ],
                      "dirty": false,
                      "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                      "getter": [Function],
                      "id": 7,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": ErrorBag {
                        "items": Array [],
                        "vmId": 3,
                      },
                      "vm": [Circular],
                    },
                    [Circular],
                    Watcher {
                      "active": true,
                      "before": [Function],
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                      "getter": [Function],
                      "id": 9,
                      "lazy": false,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": false,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                  ],
                  "errors": ErrorBag {
                    "items": Array [],
                    "vmId": 3,
                  },
                  "fields": Object {},
                },
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 3,
                "_vnode": VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": undefined,
                  "componentInstance": [Circular],
                  "componentOptions": Object {
                    "Ctor": [Function],
                    "children": undefined,
                    "listeners": Object {},
                    "propsData": Object {
                      "error": "This is error message",
                      "mask": "",
                      "value": "test",
                    },
                    "tag": undefined,
                  },
                  "context": [Circular],
                  "data": Object {
                    "attrs": Object {},
                    "hook": Object {
                      "destroy": [Function],
                      "init": [Function],
                      "insert": [Function],
                      "prepatch": [Function],
                    },
                    "on": undefined,
                    "pendingInsert": null,
                    "scopedSlots": Object {
                      "_normalized": Object {},
                    },
                  },
                  "elm": <div
                    class="base-input base-input--error"
                  >
                    <div
                      class="base-input__wrapper"
                    >
                      <input
                        autocomplete="on"
                        class="base-input__main form-control is-danger"
                        id=""
                        maxlength=""
                        min=""
                        name=""
                        placeholder=""
                        type="text"
                      />
                       
                      <span
                        class="base-input__error"
                      >
                        This is error message
                      </span>
                    </div>
                     
                    <!---->
                  </div>,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": true,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": undefined,
                  "raw": false,
                  "tag": "vue-component-12-BaseInput",
                  "text": undefined,
                },
                "_watcher": Watcher {
                  "active": true,
                  "before": [Function],
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 9,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": false,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "before": undefined,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      42,
                      43,
                    },
                    "deps": Array [
                      Dep {
                        "id": 42,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                      Dep {
                        "id": 43,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function errorBagGetter () {
        return this.$validator.errors;
      }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": ErrorBag {
                      "items": Array [],
                      "vmId": 3,
                    },
                    "vm": [Circular],
                  },
                  [Circular],
                  Watcher {
                    "active": true,
                    "before": [Function],
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 9,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": false,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
                "errors": ErrorBag {
                  "items": Array [],
                  "vmId": 3,
                },
                "fields": Object {},
              },
            },
            [Circular],
          ],
        },
      ],
      "dirty": false,
      "expression": "function fieldBagGetter () {
        return this.$validator.fields.items.reduce(function (acc, field) {
          if (field.scope) {
            if (!acc[(\\"$\\" + (field.scope))]) {
              acc[(\\"$\\" + (field.scope))] = {};
            }

            acc[(\\"$\\" + (field.scope))][field.name] = field.flags;

            return acc;
          }

          acc[field.name] = field.flags;

          return acc;
        }, {});
      }",
      "getter": [Function],
      "id": 11,
      "lazy": true,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": Object {},
      "vm": [Circular],
    },
    Watcher {
      "active": true,
      "before": [Function],
      "cb": [Function],
      "deep": false,
      "depIds": Set {
        60,
        57,
        59,
        62,
        63,
        55,
        56,
        64,
        58,
        61,
        54,
        65,
        53,
      },
      "deps": Array [
        Dep {
          "id": 60,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 57,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 59,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 62,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 63,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 55,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 56,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 64,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 58,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 61,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 54,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 65,
          "subs": Array [
            [Circular],
          ],
        },
        Dep {
          "id": 53,
          "subs": Array [
            [Circular],
          ],
        },
      ],
      "dirty": false,
      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
      "getter": [Function],
      "id": 12,
      "lazy": false,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": false,
      "user": false,
      "value": undefined,
      "vm": [Circular],
    },
  ],
  "errors": ErrorBag {
    "items": Array [],
    "vmId": 4,
  },
  "fields": Object {},
  "handleBlur": [Function],
  "handleInput": [Function],
  "handleKeyPress": [Function],
  "handleKeyup": [Function],
  "isComposing": false,
}
`;
